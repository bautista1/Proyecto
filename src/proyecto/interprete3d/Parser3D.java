
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 23 05:20:34 CST 2016dcfvgbhnj
//----------------------------------------------------

package proyecto.interprete3d;

import java_cup.runtime.*;
import proyecto.compilador.util.*;
import proyecto.interprete3d.Interprete;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 23 05:20:34 CST 2016
  */
public class Parser3D extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser3D() {super();}

  /** Constructor which sets the default scanner. */
  public Parser3D(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser3D(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\003\011\000\002\003\011\000\002\003\010" +
    "\000\002\004\004\000\002\004\003\000\002\004\002\000" +
    "\002\005\010\000\002\005\006\000\002\005\004\000\002" +
    "\005\005\000\002\005\013\000\002\005\011\000\002\005" +
    "\006\000\002\005\004\000\002\006\003\000\002\006\006" +
    "\000\002\006\003\000\002\007\003\000\002\007\006\000" +
    "\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\004\027\006\001\002\000\004\002\113\001" +
    "\002\000\006\002\000\027\077\001\002\000\006\007\007" +
    "\027\010\001\002\000\004\010\073\001\002\000\004\007" +
    "\011\001\002\000\004\010\012\001\002\000\004\011\013" +
    "\001\002\000\020\004\015\005\016\012\ufff9\023\023\024" +
    "\020\025\021\027\017\001\002\000\020\004\ufffa\005\ufffa" +
    "\012\ufffa\023\ufffa\024\ufffa\025\ufffa\027\ufffa\001\002\000" +
    "\004\022\ufff0\001\002\000\004\017\072\001\002\000\012" +
    "\005\062\007\063\013\064\022\uffee\001\002\000\004\016" +
    "\061\001\002\000\004\007\053\001\002\000\020\004\015" +
    "\005\016\012\052\023\023\024\020\025\021\027\017\001" +
    "\002\000\004\007\041\001\002\000\004\022\025\001\002" +
    "\000\010\004\027\006\026\027\030\001\002\000\014\010" +
    "\uffea\014\uffea\016\uffea\020\uffea\021\uffea\001\002\000\014" +
    "\010\uffed\014\uffed\016\uffed\020\uffed\021\uffed\001\002\000" +
    "\016\010\uffeb\013\036\014\uffeb\016\uffeb\020\uffeb\021\uffeb" +
    "\001\002\000\006\016\033\020\032\001\002\000\010\004" +
    "\027\006\026\027\030\001\002\000\020\004\ufff7\005\ufff7" +
    "\012\ufff7\023\ufff7\024\ufff7\025\ufff7\027\ufff7\001\002\000" +
    "\004\016\035\001\002\000\020\004\ufff8\005\ufff8\012\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\027\ufff8\001\002\000\010\004" +
    "\027\006\026\027\030\001\002\000\004\014\040\001\002" +
    "\000\014\010\uffec\014\uffec\016\uffec\020\uffec\021\uffec\001" +
    "\002\000\010\004\027\006\026\027\030\001\002\000\004" +
    "\021\043\001\002\000\010\004\027\006\026\027\030\001" +
    "\002\000\004\010\045\001\002\000\004\027\046\001\002" +
    "\000\004\005\047\001\002\000\004\016\050\001\002\000" +
    "\020\004\ufff4\005\ufff4\012\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\027\ufff4\001\002\000\020\004\ufffb\005\ufffb\012\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\027\ufffb\001\002\000\006\002\ufffd" +
    "\027\ufffd\001\002\000\004\026\054\001\002\000\004\015" +
    "\055\001\002\000\010\004\027\006\026\027\030\001\002" +
    "\000\004\010\057\001\002\000\004\016\060\001\002\000" +
    "\020\004\ufff3\005\ufff3\012\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\001\002\000\020\004\ufff1\005\ufff1\012\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\027\ufff1\001\002\000\004\016\071" +
    "\001\002\000\004\010\067\001\002\000\010\004\027\006" +
    "\026\027\030\001\002\000\004\014\066\001\002\000\004" +
    "\022\uffef\001\002\000\004\016\070\001\002\000\020\004" +
    "\ufff2\005\ufff2\012\ufff2\023\ufff2\024\ufff2\025\ufff2\027\ufff2" +
    "\001\002\000\020\004\ufff5\005\ufff5\012\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\027\ufff5\001\002\000\020\004\ufff6\005\ufff6" +
    "\012\ufff6\023\ufff6\024\ufff6\025\ufff6\027\ufff6\001\002\000" +
    "\004\011\074\001\002\000\020\004\015\005\016\012\ufff9" +
    "\023\023\024\020\025\021\027\017\001\002\000\020\004" +
    "\015\005\016\012\076\023\023\024\020\025\021\027\017" +
    "\001\002\000\006\002\ufffc\027\ufffc\001\002\000\006\007" +
    "\100\027\101\001\002\000\004\010\107\001\002\000\004" +
    "\007\102\001\002\000\004\010\103\001\002\000\004\011" +
    "\104\001\002\000\020\004\015\005\016\012\ufff9\023\023" +
    "\024\020\025\021\027\017\001\002\000\020\004\015\005" +
    "\016\012\106\023\023\024\020\025\021\027\017\001\002" +
    "\000\006\002\uffff\027\uffff\001\002\000\004\011\110\001" +
    "\002\000\020\004\015\005\016\012\ufff9\023\023\024\020" +
    "\025\021\027\017\001\002\000\020\004\015\005\016\012" +
    "\112\023\023\024\020\025\021\027\017\001\002\000\006" +
    "\002\ufffe\027\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\021\005\013\006\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\050\006\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\041\001\001\000\002\001\001\000\004\007\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\074\005\013\006\023\001\001\000\006\005\050\006" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\104\005\013\006\023\001\001\000\006" +
    "\005\050\006\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\110\005\013\006\023\001\001\000\006" +
    "\005\050\006\023\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser3D$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser3D$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser3D$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s)
    {
        Interprete.errores.add(new ErrorC("Sintactico", "El simbolo \""+((CompLex)s.value).getLexema()+"\" no cumple con la sintaxis.",((CompLex)s.value).getLinea(), ((CompLex)s.value).getColumna()));
         System.out.println("["+((CompLex)s.value).getLinea()+","+((CompLex)s.value).getColumna()+"]"+"\tEl simbolo \""+((CompLex)s.value).getLexema()+"\" no cumple con la sintaxis.\t"+"sym="+s.sym);
    }
    
    public LinkedList<Metodo> metodos;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser3D$actions {


    

  private final Parser3D parser;

  /** Constructor */
  CUP$Parser3D$actions(Parser3D parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser3D$do_action(
    int                        CUP$Parser3D$act_num,
    java_cup.runtime.lr_parser CUP$Parser3D$parser,
    java.util.Stack            CUP$Parser3D$stack,
    int                        CUP$Parser3D$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser3D$result;

      /* select the action based on the action number */
      switch (CUP$Parser3D$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LD_VALIDO ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).right;
		CompLex num = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.peek()).value;
		
    RESULT = num.getLexema();

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("LD_VALIDO",5, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LD_VALIDO ::= id 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.peek()).value;
		
    if (id1.getLexema().equals("p")||id1.getLexema().equals("m")) {
        RESULT = id1.getLexema();
    } else {
        System.out.println("error ld :::"+id1.getLinea());
    }

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("LD_VALIDO",5, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LD_VALIDO ::= id corcheteI LD_VALIDO corcheteD 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    if (id1.getLexema().equals("stack")||id1.getLexema().equals("heap")) {
        RESULT = id1.getLexema() + ";" + ld;
    } else {
        System.out.println("error ld :::"+id1.getLinea());
    }

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("LD_VALIDO",5, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LD_VALIDO ::= temporal 
            {
              String RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).right;
		CompLex tmp = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.peek()).value;
		
    RESULT = tmp.getLexema();

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("LD_VALIDO",5, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LI_VALIDO ::= id 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.peek()).value;
		
    if (id1.getLexema().equals("p")||id1.getLexema().equals("m")) {
        RESULT = id1.getLexema();
    }

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("LI_VALIDO",4, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LI_VALIDO ::= id corcheteI LD_VALIDO corcheteD 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    if (id1.getLexema().equals("stack")||id1.getLexema().equals("heap")) {
        RESULT = id1.getLexema() + ";" + ld;
    }

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("LI_VALIDO",4, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LI_VALIDO ::= temporal 
            {
              String RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).right;
		CompLex tmp = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.peek()).value;
		
    RESULT = tmp.getLexema();

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("LI_VALIDO",4, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= returnS puntoComa 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    RESULT = new Instruccion(l.getLinea(), "return");

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= id parentesisI parentesisD puntoComa 
            {
              Instruccion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).value;
		
    RESULT = new Instruccion(id1.getLinea(), "funcion", id1.getLexema());

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= printf parentesisI cadena coma LD_VALIDO parentesisD puntoComa 
            {
              Instruccion RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-4)).right;
		CompLex cad = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-4)).value;
		int vcleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-2)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-2)).right;
		String vc = (String)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-2)).value;
		
    String[] vcVec = vc.split(";");
    if (vcVec.length == 1){
        RESULT = new Instruccion(cad.getLinea(), "printf", cad.getLexema(), vc);
    } else {
        //error;
    }

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-6)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= ifS parentesisI LD_VALIDO opRel LD_VALIDO parentesisD id etiqueta puntoComa 
            {
              Instruccion RESULT =null;
		int ld1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-6)).left;
		int ld1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-6)).right;
		String ld1 = (String)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).right;
		CompLex op = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).value;
		int ld2left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-4)).left;
		int ld2right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-4)).right;
		String ld2 = (String)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-4)).value;
		int etileft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		CompLex eti = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    RESULT = new Instruccion(op.getLinea(), "if", ld1, op.getLexema(), ld2, eti.getLexema());

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-8)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= id etiqueta puntoComa 
            {
              Instruccion RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		CompLex eti = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    RESULT = new Instruccion(eti.getLinea(), "goto", eti.getLexema());

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-2)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= etiqueta dosPuntos 
            {
              Instruccion RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		CompLex eti = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    RESULT = new Instruccion(eti.getLinea(), eti.getLexema());

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= LI_VALIDO igual LD_VALIDO puntoComa 
            {
              Instruccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-2)).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    String[] liV = li.split(";");
    String[] ldV = ld.split(";");
    if (liV.length == 1 && ldV.length == 1){
        RESULT = new Instruccion(l.getLinea(), li, ld);
    } else if (liV.length == 2 && ldV.length == 1){
        RESULT = new Instruccion(l.getLinea(), liV[0], liV[1],ld);
    } else if (liV.length == 1 && ldV.length == 2){
        RESULT = new Instruccion(l.getLinea(), li, ldV[0], ldV[1]);
    } else {
        //error;
    }

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= LI_VALIDO igual LD_VALIDO opMat LD_VALIDO puntoComa 
            {
              Instruccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).value;
		int ld1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).left;
		int ld1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).right;
		String ld1 = (String)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-2)).right;
		CompLex op = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-2)).value;
		int ld2left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int ld2right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		String ld2 = (String)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    RESULT = new Instruccion(op.getLinea(), li, ld1, op.getLexema(), ld2);

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= 
            {
              LinkedList RESULT =null;
		
    RESULT =  new LinkedList<Instruccion>();

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).right;
		Instruccion in = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser3D$stack.peek()).value;
		
    LinkedList<Instruccion> ins = new LinkedList<Instruccion>();
    ins.add(in);
    RESULT = ins;

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		LinkedList ins = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).right;
		Instruccion in = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser3D$stack.peek()).value;
		
    ins.add(in);
    RESULT = ins;

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_METODOS ::= id parentesisI parentesisD llaveI INSTRUCCIONES llaveD 
            {
              LinkedList RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		LinkedList ins = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    LinkedList<Metodo> lm = new LinkedList<Metodo>();
    Metodo m = new Metodo(id1.getLexema(), ins);
    lm.add(m);
    RESULT = lm;

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("L_METODOS",1, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_METODOS ::= id id parentesisI parentesisD llaveI INSTRUCCIONES llaveD 
            {
              LinkedList RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		LinkedList ins = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    LinkedList<Metodo> lm = new LinkedList<Metodo>();
    Metodo m = new Metodo(id1.getLexema(), ins);
    lm.add(m);
    RESULT = lm;

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("L_METODOS",1, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-6)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_METODOS ::= L_METODOS id parentesisI parentesisD llaveI INSTRUCCIONES llaveD 
            {
              LinkedList RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-6)).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-6)).right;
		LinkedList lm = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		LinkedList ins = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    Metodo m = new Metodo(id1.getLexema(), ins);
    lm.add(m);
    RESULT = lm;

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("L_METODOS",1, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-6)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_METODOS ::= L_METODOS id id parentesisI parentesisD llaveI INSTRUCCIONES llaveD 
            {
              LinkedList RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-7)).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-7)).right;
		LinkedList lm = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		LinkedList ins = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		
    Metodo m = new Metodo(id1.getLexema(), ins);
    lm.add(m);
    RESULT = lm;

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("L_METODOS",1, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-7)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= L_METODOS 
            {
              Object RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()).right;
		LinkedList lm = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser3D$stack.peek()).value;
		
    parser.metodos = lm;

              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          return CUP$Parser3D$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)).value;
		RESULT = start_val;
              CUP$Parser3D$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser3D$stack.elementAt(CUP$Parser3D$top-1)), ((java_cup.runtime.Symbol)CUP$Parser3D$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser3D$parser.done_parsing();
          return CUP$Parser3D$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

