
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 04 21:21:38 CST 2014
//----------------------------------------------------

package proyecto.compilador.proyectos;

import java_cup.runtime.*;
import proyecto.compilador.util.ErrorC;
import proyecto.compilador.util.CompLex;
import java.util.LinkedList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 04 21:21:38 CST 2014
  */
public class ParserProyectos extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserProyectos() {super();}

  /** Constructor which sets the default scanner. */
  public ParserProyectos(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserProyectos(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\002\004\000\002\002\020\000\002\002" +
    "\003\000\002\003\004\000\002\007\012\000\002\007\003" +
    "\000\002\004\012\000\002\005\004\000\002\005\003\000" +
    "\002\006\011\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\006\003\004\005\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\061\001\002\000\004\011\007" +
    "\001\002\000\004\015\010\001\002\000\004\007\011\001" +
    "\002\000\004\004\012\001\002\000\004\016\013\001\002" +
    "\000\004\007\014\001\002\000\004\004\015\001\002\000" +
    "\004\006\016\001\002\000\004\005\021\001\002\000\006" +
    "\003\047\005\051\001\002\000\004\005\043\001\002\000" +
    "\004\013\022\001\002\000\004\006\023\001\002\000\006" +
    "\003\026\005\027\001\002\000\006\003\ufff9\005\ufff9\001" +
    "\002\000\006\003\026\005\037\001\002\000\006\003\ufff7" +
    "\005\ufff7\001\002\000\004\014\030\001\002\000\004\015" +
    "\031\001\002\000\004\007\032\001\002\000\004\004\033" +
    "\001\002\000\004\010\034\001\002\000\004\006\035\001" +
    "\002\000\006\003\ufff8\005\ufff8\001\002\000\006\003\ufffa" +
    "\005\ufffa\001\002\000\006\010\040\014\030\001\002\000" +
    "\004\013\041\001\002\000\004\006\042\001\002\000\006" +
    "\003\ufffb\005\ufffb\001\002\000\004\010\044\001\002\000" +
    "\004\011\045\001\002\000\004\006\046\001\002\000\004" +
    "\002\000\001\002\000\004\005\ufffc\001\002\000\004\005" +
    "\ufffe\001\002\000\004\012\052\001\002\000\004\006\053" +
    "\001\002\000\006\003\026\005\027\001\002\000\004\005" +
    "\055\001\002\000\004\010\056\001\002\000\004\012\057" +
    "\001\002\000\004\006\060\001\002\000\004\005\ufffd\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\017" +
    "\004\016\001\001\000\004\007\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\024" +
    "\006\023\001\001\000\002\001\001\000\004\006\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserProyectos$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserProyectos$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserProyectos$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String nombre;
    public String ruta;
    public List<String> archivos = new LinkedList<String>();
    public String principal;


    public List<ErrorC> errores = new LinkedList<ErrorC>();
    public void syntax_error(Symbol s)
    {
        errores.add(new ErrorC("Sintactico", "El simbolo \""+((CompLex)s.value).getLexema()+"\" no cumple con la sintaxis.",((CompLex)s.value).getLinea(), ((CompLex)s.value).getColumna()));
        System.out.println("["+((CompLex)s.value).getLinea()+","+((CompLex)s.value).getColumna()+"]"+"\tEl simbolo \""+((CompLex)s.value).getLexema()+"\" no cumple con la sintaxis.\t"+"sym="+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserProyectos$actions {


    public void agregarError(String tipo, String descripcion, int linea, int columna){
	parser.errores.add(new ErrorC(tipo, descripcion, linea, columna));
    }


  private final ParserProyectos parser;

  /** Constructor */
  CUP$ParserProyectos$actions(ParserProyectos parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserProyectos$do_action(
    int                        CUP$ParserProyectos$act_num,
    java_cup.runtime.lr_parser CUP$ParserProyectos$parser,
    java.util.Stack            CUP$ParserProyectos$stack,
    int                        CUP$ParserProyectos$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserProyectos$result;

      /* select the action based on the action number */
      switch (CUP$ParserProyectos$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ARCHIVO ::= error 
            {
              Object RESULT =null;

              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("ARCHIVO",4, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          return CUP$ParserProyectos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ARCHIVO ::= menor archivo nombre igual cadena diagonal mayor 
            {
              Object RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-2)).right;
		CompLex cadena1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-2)).value;
		
	RESULT = cadena1.getLexema();

              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("ARCHIVO",4, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-6)), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          return CUP$ParserProyectos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L_ARCHIVO ::= ARCHIVO 
            {
              Object RESULT =null;
		int archivoleft = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()).left;
		int archivoright = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()).right;
		Object archivo = (Object)((java_cup.runtime.Symbol) CUP$ParserProyectos$stack.peek()).value;
		
	if (archivo != null)
		parser.archivos.add(archivo.toString());

              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("L_ARCHIVO",3, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          return CUP$ParserProyectos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_ARCHIVO ::= L_ARCHIVO ARCHIVO 
            {
              Object RESULT =null;
		int archivoleft = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()).left;
		int archivoright = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()).right;
		Object archivo = (Object)((java_cup.runtime.Symbol) CUP$ParserProyectos$stack.peek()).value;
		
	if (archivo != null)
		parser.archivos.add(archivo.toString());

              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("L_ARCHIVO",3, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-1)), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          return CUP$ParserProyectos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_ARCHIVOS ::= menor archivos mayor L_ARCHIVO menor diagonal archivos mayor 
            {
              Object RESULT =null;

              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("BLOQUE_ARCHIVOS",2, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-7)), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          return CUP$ParserProyectos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_PRINCIPAL ::= error 
            {
              Object RESULT =null;

              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("BLOQUE_PRINCIPAL",5, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          return CUP$ParserProyectos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_PRINCIPAL ::= menor principal mayor ARCHIVO menor diagonal principal mayor 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-6)).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-6)).value;
		int archivoleft = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-4)).left;
		int archivoright = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-4)).right;
		Object archivo = (Object)((java_cup.runtime.Symbol) CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-4)).value;
		
	if (parser.principal == null) {
		parser.principal = archivo.toString();
	} else {
		agregarError("Semantico", "Ya se habia definido el archivo principal", l.getLinea(), l.getColumna());
	}

              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("BLOQUE_PRINCIPAL",5, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-7)), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          return CUP$ParserProyectos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE_INTERNO ::= BLOQUE_ARCHIVOS BLOQUE_PRINCIPAL 
            {
              Object RESULT =null;

              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("BLOQUE_INTERNO",1, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-1)), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          return CUP$ParserProyectos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIAL ::= error 
            {
              Object RESULT =null;

              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          return CUP$ParserProyectos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= menor proyecto nombre igual cadena ruta igual cadena mayor BLOQUE_INTERNO menor diagonal proyecto mayor 
            {
              Object RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-9)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-9)).right;
		CompLex cadena1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-9)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-6)).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-6)).right;
		CompLex cadena2 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-6)).value;
		
        parser.nombre = cadena1.getLexema();
        parser.ruta = cadena2.getLexema();  

              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-13)), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          return CUP$ParserProyectos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-1)).value;
		RESULT = start_val;
              CUP$ParserProyectos$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.elementAt(CUP$ParserProyectos$top-1)), ((java_cup.runtime.Symbol)CUP$ParserProyectos$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserProyectos$parser.done_parsing();
          return CUP$ParserProyectos$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

