
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 09 20:53:25 CST 2014
//----------------------------------------------------

package proyecto.compilador.lenguaje;

import java_cup.runtime.*;
import proyecto.compilador.util.*;
import java.util.LinkedList;
import java.util.List;
import java.io.File;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 09 20:53:25 CST 2014
  */
public class ParserLenguaje extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserLenguaje() {super();}

  /** Constructor which sets the default scanner. */
  public ParserLenguaje(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserLenguaje(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\010\000\002\041\002\000\002\005\012\000" +
    "\002\037\004\000\002\037\002\000\002\037\003\000\002" +
    "\006\004\000\002\006\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\006\003\000\002\007\013" +
    "\000\002\007\012\000\002\007\012\000\002\033\003\000" +
    "\002\033\002\000\002\010\005\000\002\010\004\000\002" +
    "\036\006\000\002\036\004\000\002\036\002\000\002\036" +
    "\003\000\002\035\002\000\002\035\004\000\002\035\004" +
    "\000\002\035\003\000\002\035\003\000\002\035\006\000" +
    "\002\012\004\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\022" +
    "\000\002\013\020\000\002\013\030\000\002\013\024\000" +
    "\002\013\024\000\002\013\020\000\002\013\016\000\002" +
    "\013\006\000\002\013\003\000\002\013\003\000\002\013" +
    "\004\000\002\013\003\000\002\014\010\000\002\026\004" +
    "\000\002\026\002\000\002\015\013\000\002\027\003\000" +
    "\002\027\003\000\002\016\007\000\002\017\010\000\002" +
    "\021\006\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\022\004\000\002\023\007\000\002\023\005" +
    "\000\002\023\003\000\002\023\005\000\002\024\005\000" +
    "\002\024\004\000\002\024\004\000\002\032\003\000\002" +
    "\032\005\000\002\032\005\000\002\032\004\000\002\040" +
    "\003\000\002\040\003\000\002\011\005\000\002\011\003" +
    "\000\002\034\003\000\002\034\002\000\002\025\005\000" +
    "\002\025\003\000\002\025\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\007\000\002\031\007\000\002\031" +
    "\004\000\002\031\004\000\002\031\005\000\002\031\004" +
    "\000\002\031\004\000\002\031\011\000\002\031\004\000" +
    "\002\031\005\000\002\031\006\000\002\031\006\000\002" +
    "\031\006\000\002\031\003\000\002\030\006\000\002\030" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015e\000\010\003\006\054\012\057\010\001\002\000" +
    "\004\002\uffff\001\002\000\006\054\ufffc\057\ufffc\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\u0160\001\002\000" +
    "\004\010\u015b\001\002\000\006\054\012\057\010\001\002" +
    "\000\004\053\013\001\002\000\004\073\014\001\002\000" +
    "\010\003\016\036\ufff7\055\015\001\002\000\004\073\u0158" +
    "\001\002\000\004\036\ufff6\001\002\000\004\036\ufffa\001" +
    "\002\000\004\036\021\001\002\000\016\003\031\005\024" +
    "\022\030\046\033\054\026\073\023\001\002\000\020\003" +
    "\ufff3\005\ufff3\022\ufff3\037\ufff3\046\ufff3\054\ufff3\073\ufff3" +
    "\001\002\000\006\010\uffe1\073\uffe1\001\002\000\006\010" +
    "\uffe0\073\uffe0\001\002\000\004\073\u0151\001\002\000\012" +
    "\005\024\022\030\046\033\073\046\001\002\000\020\003" +
    "\ufff2\005\ufff2\022\ufff2\037\ufff2\046\ufff2\054\ufff2\073\ufff2" +
    "\001\002\000\004\010\042\001\002\000\020\003\ufff0\005" +
    "\ufff0\022\ufff0\037\ufff0\046\ufff0\054\ufff0\073\ufff0\001\002" +
    "\000\020\003\040\005\024\022\030\037\041\046\033\054" +
    "\026\073\023\001\002\000\006\005\034\073\035\001\002" +
    "\000\006\010\uffe3\073\uffe3\001\002\000\006\010\uffe2\073" +
    "\uffe2\001\002\000\020\003\ufff5\005\ufff5\022\ufff5\037\ufff5" +
    "\046\ufff5\054\ufff5\073\ufff5\001\002\000\020\003\ufff4\005" +
    "\ufff4\022\ufff4\037\ufff4\046\ufff4\054\ufff4\073\ufff4\001\002" +
    "\000\020\003\ufff1\005\ufff1\022\ufff1\037\ufff1\046\ufff1\054" +
    "\ufff1\073\ufff1\001\002\000\004\002\ufff9\001\002\000\014" +
    "\005\024\010\uffe4\022\030\046\033\073\023\001\002\000" +
    "\004\010\044\001\002\000\006\010\uffdf\073\uffdf\001\002" +
    "\000\004\073\u0149\001\002\000\006\023\047\073\uffe1\001" +
    "\002\000\020\003\050\005\024\014\uffe6\022\030\024\uffe6" +
    "\046\033\073\023\001\002\000\006\014\uffe5\024\uffe5\001" +
    "\002\000\004\073\u0147\001\002\000\006\014\054\024\053" +
    "\001\002\000\004\036\057\001\002\000\012\005\024\022" +
    "\030\046\033\073\023\001\002\000\004\073\056\001\002" +
    "\000\006\014\uffe8\024\uffe8\001\002\000\056\003\105\005" +
    "\024\022\030\027\070\030\111\031\101\033\102\034\060" +
    "\037\uffeb\046\033\052\066\056\075\060\063\061\106\062" +
    "\110\063\073\064\107\065\062\066\115\067\103\072\104" +
    "\073\077\001\002\000\004\023\u0140\001\002\000\056\003" +
    "\uffdd\005\uffdd\022\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd" +
    "\034\uffdd\037\uffdd\046\uffdd\052\uffdd\056\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\072\uffdd\073\uffdd\001\002\000\004\023\u0133\001\002\000" +
    "\004\023\u0124\001\002\000\004\037\u0123\001\002\000\060" +
    "\003\uffda\005\uffda\022\uffda\027\uffda\030\uffda\031\uffda\033" +
    "\uffda\034\uffda\035\uffda\037\uffda\046\uffda\052\uffda\056\uffda" +
    "\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066" +
    "\uffda\067\uffda\072\uffda\073\uffda\001\002\000\032\003\131" +
    "\004\117\006\126\007\123\023\124\032\121\046\130\047" +
    "\125\056\133\070\127\071\122\073\120\001\002\000\056" +
    "\003\105\005\024\022\030\027\070\030\111\031\101\033" +
    "\102\034\060\037\uffec\046\033\052\066\056\075\060\063" +
    "\061\106\062\110\063\073\064\107\065\062\066\115\067" +
    "\103\072\104\073\077\001\002\000\056\003\105\005\024" +
    "\022\030\027\070\030\111\031\101\033\102\034\060\036" +
    "\252\046\033\052\066\056\075\060\063\061\106\062\110" +
    "\063\073\064\107\065\062\066\115\067\103\072\104\073" +
    "\077\001\002\000\060\003\uffd9\005\uffd9\022\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9\046" +
    "\uffd9\052\uffd9\056\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9" +
    "\064\uffd9\065\uffd9\066\uffd9\067\uffd9\072\uffd9\073\uffd9\001" +
    "\002\000\060\003\uffdc\005\uffdc\022\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\046\uffdc\052" +
    "\uffdc\056\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\067\uffdc\072\uffdc\073\uffdc\001\002\000" +
    "\004\023\u010c\001\002\000\060\003\uffd6\005\uffd6\022\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\037" +
    "\uffd6\046\uffd6\052\uffd6\056\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\072\uffd6\073" +
    "\uffd6\001\002\000\004\051\u010a\001\002\000\062\003\uffd8" +
    "\005\uffd8\022\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\037\uffd8\046\uffd8\051\u0106\052\uffd8\056\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\072\uffd8\073\uffd8\001\002\000\022\011\uffb5" +
    "\012\uffb5\013\uffb5\023\376\025\206\050\uffb5\051\375\073" +
    "\uffe1\001\002\000\012\011\371\012\373\013\370\050\372" +
    "\001\002\000\004\023\345\001\002\000\060\003\uffcd\005" +
    "\uffcd\022\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\037\uffcd\046\uffcd\052\uffcd\056\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\072\uffcd\073\uffcd\001\002\000\004\023\342\001\002\000" +
    "\060\003\uffcc\005\uffcc\022\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\037\uffcc\046\uffcc\052\uffcc\056" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\072\uffcc\073\uffcc\001\002\000\060\003" +
    "\uffca\005\uffca\022\uffca\027\uffca\030\uffca\031\uffca\033\uffca" +
    "\034\uffca\035\uffca\037\uffca\046\uffca\052\uffca\056\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\067\uffca\072\uffca\073\uffca\001\002\000\004\023\325\001" +
    "\002\000\004\023\304\001\002\000\004\023\257\001\002" +
    "\000\004\023\245\001\002\000\060\003\uffd7\005\uffd7\022" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\037\uffd7\046\uffd7\052\uffd7\056\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\072\uffd7" +
    "\073\uffd7\001\002\000\004\073\236\001\002\000\060\003" +
    "\uffdb\005\uffdb\022\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\037\uffdb\046\uffdb\052\uffdb\056\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\072\uffdb\073\uffdb\001\002\000\004\023\116\001" +
    "\002\000\032\003\131\004\117\006\126\007\123\023\124" +
    "\032\121\046\130\047\125\056\133\070\127\071\122\073" +
    "\120\001\002\000\120\003\uffa6\005\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\037\uffa6\042\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\051\uffa6\052\uffa6\054\uffa6\056\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\072\uffa6\073\uffa6\001\002\000\124\003\uffa3\005\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\210\024\uffa3\025\206" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\037\uffa3\042\uffa3\044\uffa3\045\uffa3\046\uffa3\051\uffa3" +
    "\052\uffa3\054\uffa3\056\uffa3\060\uffa3\061\uffa3\062\uffa3\063" +
    "\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\072\uffa3\073\uffa3" +
    "\001\002\000\006\022\225\073\226\001\002\000\120\003" +
    "\uffa5\005\uffa5\010\uffa5\011\uffa5\012\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\024\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\037\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5\051\uffa5\052" +
    "\uffa5\054\uffa5\056\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\067\uffa5\072\uffa5\073\uffa5\001" +
    "\002\000\120\003\uffa7\005\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022" +
    "\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\037\uffa7\042\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\051\uffa7\052\uffa7\054\uffa7\056\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\072" +
    "\uffa7\073\uffa7\001\002\000\034\003\131\004\117\005\174" +
    "\006\126\007\123\023\124\032\121\046\130\047\125\056" +
    "\133\070\127\071\122\073\173\001\002\000\032\003\131" +
    "\004\117\006\126\007\123\023\124\032\121\046\130\047" +
    "\125\056\133\070\127\071\122\073\120\001\002\000\120" +
    "\003\uffa8\005\uffa8\010\uffa8\011\uffa8\012\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\024\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\037\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8\051\uffa8" +
    "\052\uffa8\054\uffa8\056\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\072\uffa8\073\uffa8" +
    "\001\002\000\120\003\uffa4\005\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\024\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\037\uffa4\042\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\051\uffa4\052\uffa4\054\uffa4\056\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\072\uffa4\073\uffa4\001\002\000\032\003\131\004\117\006" +
    "\126\007\123\023\124\032\121\046\130\047\125\056\133" +
    "\070\127\071\122\073\120\001\002\000\120\003\uff8c\005" +
    "\uff8c\010\uff8c\011\uff8c\012\uff8c\014\uff8c\015\uff8c\016\uff8c" +
    "\017\uff8c\020\uff8c\021\uff8c\022\uff8c\024\uff8c\026\uff8c\027" +
    "\uff8c\030\uff8c\031\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c" +
    "\042\uff8c\044\uff8c\045\uff8c\046\uff8c\051\uff8c\052\uff8c\054" +
    "\uff8c\056\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\066\uff8c\067\uff8c\072\uff8c\073\uff8c\001\002\000" +
    "\032\010\137\011\143\012\144\014\135\015\146\016\140" +
    "\017\142\020\134\021\147\044\145\045\136\051\141\001" +
    "\002\000\120\003\uffa2\005\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\037\uffa2\042\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\051\uffa2\052\uffa2\054\uffa2\056\uffa2\060\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\072" +
    "\uffa2\073\uffa2\001\002\000\032\003\131\004\117\006\126" +
    "\007\123\023\124\032\121\046\130\047\125\056\133\070" +
    "\127\071\122\073\120\001\002\000\032\003\131\004\117" +
    "\006\126\007\123\023\124\032\121\046\130\047\125\056" +
    "\133\070\127\071\122\073\120\001\002\000\032\003\131" +
    "\004\117\006\126\007\123\023\124\032\121\046\130\047" +
    "\125\056\133\070\127\071\122\073\120\001\002\000\032" +
    "\003\131\004\117\006\126\007\123\023\124\032\121\046" +
    "\130\047\125\056\133\070\127\071\122\073\120\001\002" +
    "\000\032\003\131\004\117\006\126\007\123\023\124\032" +
    "\121\046\130\047\125\056\133\070\127\071\122\073\120" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\032\003\131\004\117\006\126\007" +
    "\123\023\124\032\121\046\130\047\125\056\133\070\127" +
    "\071\122\073\120\001\002\000\120\003\uff97\005\uff97\010" +
    "\uff97\011\uff97\012\uff97\014\uff97\015\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\024\uff97\026\uff97\027\uff97\030" +
    "\uff97\031\uff97\033\uff97\034\uff97\035\uff97\037\uff97\042\uff97" +
    "\044\uff97\045\uff97\046\uff97\051\uff97\052\uff97\054\uff97\056" +
    "\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97" +
    "\066\uff97\067\uff97\072\uff97\073\uff97\001\002\000\120\003" +
    "\uff96\005\uff96\010\uff96\011\uff96\012\uff96\014\uff96\015\uff96" +
    "\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\024\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\033\uff96\034\uff96\035\uff96" +
    "\037\uff96\042\uff96\044\uff96\045\uff96\046\uff96\051\uff96\052" +
    "\uff96\054\uff96\056\uff96\060\uff96\061\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\066\uff96\067\uff96\072\uff96\073\uff96\001" +
    "\002\000\032\003\131\004\117\006\126\007\123\023\124" +
    "\032\121\046\130\047\125\056\133\070\127\071\122\073" +
    "\120\001\002\000\032\003\131\004\117\006\126\007\123" +
    "\023\124\032\121\046\130\047\125\056\133\070\127\071" +
    "\122\073\120\001\002\000\032\003\131\004\117\006\126" +
    "\007\123\023\124\032\121\046\130\047\125\056\133\070" +
    "\127\071\122\073\120\001\002\000\120\003\uff9d\005\uff9d" +
    "\010\uff9d\011\uff9d\012\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\024\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\033\uff9d\034\uff9d\035\uff9d\037\uff9d\042" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\051\uff9d\052\uff9d\054\uff9d" +
    "\056\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065" +
    "\uff9d\066\uff9d\067\uff9d\072\uff9d\073\uff9d\001\002\000\120" +
    "\003\uffa1\005\uffa1\010\uffa1\011\uffa1\012\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\142\020\134\021\147\022\uffa1\024\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\037\uffa1\042\uffa1\044\uffa1\045\uffa1\046\uffa1\051\uffa1" +
    "\052\uffa1\054\uffa1\056\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\072\uffa1\073\uffa1" +
    "\001\002\000\120\003\uff9b\005\uff9b\010\137\011\uff9b\012" +
    "\uff9b\014\uff9b\015\146\016\140\017\142\020\134\021\147" +
    "\022\uff9b\024\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\037\uff9b\042\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\051\uff9b\052\uff9b\054\uff9b\056\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\072\uff9b\073\uff9b\001\002\000\120\003\uff9f\005\uff9f\010" +
    "\uff9f\011\uff9f\012\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\147\022\uff9f\024\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f\037\uff9f\042\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\051\uff9f\052\uff9f\054\uff9f\056" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\066\uff9f\067\uff9f\072\uff9f\073\uff9f\001\002\000\120\003" +
    "\uff95\005\uff95\010\137\011\uff95\012\uff95\014\uff95\015\146" +
    "\016\140\017\142\020\134\021\147\022\uff95\024\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\033\uff95\034\uff95\035\uff95" +
    "\037\uff95\042\uff95\044\145\045\136\046\uff95\051\uff95\052" +
    "\uff95\054\uff95\056\uff95\060\uff95\061\uff95\062\uff95\063\uff95" +
    "\064\uff95\065\uff95\066\uff95\067\uff95\072\uff95\073\uff95\001" +
    "\002\000\120\003\uffa0\005\uffa0\010\uffa0\011\uffa0\012\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\142\020\134\021\147\022" +
    "\uffa0\024\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\037\uffa0\042\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\051\uffa0\052\uffa0\054\uffa0\056\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\072" +
    "\uffa0\073\uffa0\001\002\000\120\003\uff9c\005\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\014\uff9c\015\146\016\140\017\142\020" +
    "\134\021\147\022\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\033\uff9c\034\uff9c\035\uff9c\037\uff9c\042\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\051\uff9c\052\uff9c\054\uff9c\056\uff9c" +
    "\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\067\uff9c\072\uff9c\073\uff9c\001\002\000\120\003\uff9a" +
    "\005\uff9a\010\137\011\uff9a\012\uff9a\014\uff9a\015\146\016" +
    "\140\017\142\020\134\021\147\022\uff9a\024\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a\037" +
    "\uff9a\042\uff9a\044\uff9a\045\uff9a\046\uff9a\051\uff9a\052\uff9a" +
    "\054\uff9a\056\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064" +
    "\uff9a\065\uff9a\066\uff9a\067\uff9a\072\uff9a\073\uff9a\001\002" +
    "\000\032\010\137\011\143\012\144\014\161\015\146\016" +
    "\140\017\142\020\134\021\147\044\145\045\136\051\141" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\032\010\137\011\143\012\144\014" +
    "\163\015\146\016\140\017\142\020\134\021\147\044\145" +
    "\045\136\051\141\001\002\000\032\003\131\004\117\006" +
    "\126\007\123\023\124\032\121\046\130\047\125\056\133" +
    "\070\127\071\122\073\120\001\002\000\032\010\137\011" +
    "\143\012\144\014\165\015\146\016\140\017\142\020\134" +
    "\021\147\044\145\045\136\051\141\001\002\000\032\003" +
    "\131\004\117\006\126\007\123\023\124\032\121\046\130" +
    "\047\125\056\133\070\127\071\122\073\120\001\002\000" +
    "\032\010\137\011\143\012\144\015\146\016\140\017\142" +
    "\020\134\021\147\024\167\044\145\045\136\051\141\001" +
    "\002\000\060\003\uffcf\005\uffcf\022\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\046\uffcf\052" +
    "\uffcf\056\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\067\uffcf\072\uffcf\073\uffcf\001\002\000" +
    "\120\003\uff9e\005\uff9e\010\uff9e\011\uff9e\012\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\147\022\uff9e\024" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\037\uff9e\042\uff9e\044\uff9e\045\uff9e\046\uff9e\051" +
    "\uff9e\052\uff9e\054\uff9e\056\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\072\uff9e\073" +
    "\uff9e\001\002\000\120\003\uff91\005\uff91\010\137\011\143" +
    "\012\144\014\uff91\015\146\016\140\017\142\020\134\021" +
    "\147\022\uff91\024\uff91\026\uff91\027\uff91\030\uff91\031\uff91" +
    "\033\uff91\034\uff91\035\uff91\037\uff91\042\uff91\044\145\045" +
    "\136\046\uff91\051\141\052\uff91\054\uff91\056\uff91\060\uff91" +
    "\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067" +
    "\uff91\072\uff91\073\uff91\001\002\000\120\003\uff93\005\uff93" +
    "\010\137\011\143\012\144\014\uff93\015\146\016\140\017" +
    "\142\020\134\021\147\022\uff93\024\uff93\026\uff93\027\uff93" +
    "\030\uff93\031\uff93\033\uff93\034\uff93\035\uff93\037\uff93\042" +
    "\uff93\044\145\045\136\046\uff93\051\141\052\uff93\054\uff93" +
    "\056\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\072\uff93\073\uff93\001\002\000\036" +
    "\010\uffa3\011\uffa3\012\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\023\210\024\uffa3\025\206\044\uffa3\045\uffa3" +
    "\051\uffa3\001\002\000\004\024\203\001\002\000\032\010" +
    "\137\011\143\012\144\015\146\016\140\017\142\020\134" +
    "\021\147\024\176\044\145\045\136\051\141\001\002\000" +
    "\122\003\uff90\005\uff90\010\uff90\011\uff90\012\uff90\014\uff90" +
    "\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\024" +
    "\uff90\026\uff90\027\uff90\030\uff90\031\uff90\033\uff90\034\uff90" +
    "\035\uff90\037\uff90\042\uff90\043\177\044\uff90\045\uff90\046" +
    "\uff90\051\uff90\052\uff90\054\uff90\056\uff90\060\uff90\061\uff90" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90\072" +
    "\uff90\073\uff90\001\002\000\032\003\131\004\117\006\126" +
    "\007\123\023\124\032\121\046\130\047\125\056\133\070" +
    "\127\071\122\073\120\001\002\000\032\010\137\011\143" +
    "\012\144\015\146\016\140\017\142\020\134\021\147\042" +
    "\201\044\145\045\136\051\141\001\002\000\032\003\131" +
    "\004\117\006\126\007\123\023\124\032\121\046\130\047" +
    "\125\056\133\070\127\071\122\073\120\001\002\000\120" +
    "\003\uff92\005\uff92\010\137\011\143\012\144\014\uff92\015" +
    "\146\016\140\017\142\020\134\021\147\022\uff92\024\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\033\uff92\034\uff92\035" +
    "\uff92\037\uff92\042\uff92\044\145\045\136\046\uff92\051\141" +
    "\052\uff92\054\uff92\056\uff92\060\uff92\061\uff92\062\uff92\063" +
    "\uff92\064\uff92\065\uff92\066\uff92\067\uff92\072\uff92\073\uff92" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\120\003\uff8f\005\uff8f\010\137\011" +
    "\143\012\144\014\uff8f\015\146\016\140\017\142\020\134" +
    "\021\147\022\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\033\uff8f\034\uff8f\035\uff8f\037\uff8f\042\uff8f\044\145" +
    "\045\136\046\uff8f\051\141\052\uff8f\054\uff8f\056\uff8f\060" +
    "\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f" +
    "\067\uff8f\072\uff8f\073\uff8f\001\002\000\122\003\uff94\005" +
    "\uff94\010\uff94\011\uff94\012\uff94\014\uff94\015\uff94\016\uff94" +
    "\017\uff94\020\uff94\021\uff94\022\uff94\024\uff94\025\222\026" +
    "\uff94\027\uff94\030\uff94\031\uff94\033\uff94\034\uff94\035\uff94" +
    "\037\uff94\042\uff94\044\uff94\045\uff94\046\uff94\051\uff94\052" +
    "\uff94\054\uff94\056\uff94\060\uff94\061\uff94\062\uff94\063\uff94" +
    "\064\uff94\065\uff94\066\uff94\067\uff94\072\uff94\073\uff94\001" +
    "\002\000\032\003\131\004\117\006\126\007\123\023\124" +
    "\032\121\046\130\047\125\056\133\070\127\071\122\073" +
    "\120\001\002\000\032\003\131\004\117\006\126\007\123" +
    "\023\124\032\121\046\130\047\125\056\133\070\127\071" +
    "\122\073\120\001\002\000\034\003\131\004\117\006\126" +
    "\007\123\023\124\024\uffac\032\121\046\130\047\125\056" +
    "\133\070\127\071\122\073\120\001\002\000\004\024\216" +
    "\001\002\000\006\014\214\024\uffad\001\002\000\034\010" +
    "\137\011\143\012\144\014\uffae\015\146\016\140\017\142" +
    "\020\134\021\147\024\uffae\044\145\045\136\051\141\001" +
    "\002\000\032\003\131\004\117\006\126\007\123\023\124" +
    "\032\121\046\130\047\125\056\133\070\127\071\122\073" +
    "\120\001\002\000\034\010\137\011\143\012\144\014\uffaf" +
    "\015\146\016\140\017\142\020\134\021\147\024\uffaf\044" +
    "\145\045\136\051\141\001\002\000\120\003\uff8d\005\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\014\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\020\uff8d\021\uff8d\022\uff8d\024\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\033\uff8d\034\uff8d\035\uff8d\037\uff8d\042" +
    "\uff8d\044\uff8d\045\uff8d\046\uff8d\051\uff8d\052\uff8d\054\uff8d" +
    "\056\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065" +
    "\uff8d\066\uff8d\067\uff8d\072\uff8d\073\uff8d\001\002\000\120" +
    "\003\uff8e\005\uff8e\010\137\011\143\012\144\014\uff8e\015" +
    "\146\016\140\017\142\020\134\021\147\022\uff8e\024\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\031\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\037\uff8e\042\uff8e\044\145\045\136\046\uff8e\051\141" +
    "\052\uff8e\054\uff8e\056\uff8e\060\uff8e\061\uff8e\062\uff8e\063" +
    "\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\072\uff8e\073\uff8e" +
    "\001\002\000\032\010\137\011\143\012\144\015\146\016" +
    "\140\017\142\020\134\021\147\026\221\044\145\045\136" +
    "\051\141\001\002\000\126\003\uff8a\005\uff8a\010\uff8a\011" +
    "\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a" +
    "\020\uff8a\021\uff8a\022\uff8a\024\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\033\uff8a\034\uff8a\035\uff8a\037\uff8a" +
    "\042\uff8a\044\uff8a\045\uff8a\046\uff8a\050\uff8a\051\uff8a\052" +
    "\uff8a\054\uff8a\056\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\066\uff8a\067\uff8a\072\uff8a\073\uff8a\001" +
    "\002\000\032\003\131\004\117\006\126\007\123\023\124" +
    "\032\121\046\130\047\125\056\133\070\127\071\122\073" +
    "\120\001\002\000\032\010\137\011\143\012\144\015\146" +
    "\016\140\017\142\020\134\021\147\026\224\044\145\045" +
    "\136\051\141\001\002\000\126\003\uff8b\005\uff8b\010\uff8b" +
    "\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\024\uff8b\025\uff8b\026\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\033\uff8b\034\uff8b\035\uff8b\037" +
    "\uff8b\042\uff8b\044\uff8b\045\uff8b\046\uff8b\050\uff8b\051\uff8b" +
    "\052\uff8b\054\uff8b\056\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\072\uff8b\073\uff8b" +
    "\001\002\000\004\023\232\001\002\000\004\023\227\001" +
    "\002\000\034\003\131\004\117\006\126\007\123\023\124" +
    "\024\uffac\032\121\046\130\047\125\056\133\070\127\071" +
    "\122\073\120\001\002\000\004\024\231\001\002\000\120" +
    "\003\uff99\005\uff99\010\uff99\011\uff99\012\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\024\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\033\uff99\034\uff99\035" +
    "\uff99\037\uff99\042\uff99\044\uff99\045\uff99\046\uff99\051\uff99" +
    "\052\uff99\054\uff99\056\uff99\060\uff99\061\uff99\062\uff99\063" +
    "\uff99\064\uff99\065\uff99\066\uff99\067\uff99\072\uff99\073\uff99" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\006\014\214\024\234\001\002\000" +
    "\120\003\uff98\005\uff98\010\uff98\011\uff98\012\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\024" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\033\uff98\034\uff98" +
    "\035\uff98\037\uff98\042\uff98\044\uff98\045\uff98\046\uff98\051" +
    "\uff98\052\uff98\054\uff98\056\uff98\060\uff98\061\uff98\062\uff98" +
    "\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\072\uff98\073" +
    "\uff98\001\002\000\062\003\uffbd\005\uffbd\014\241\022\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\037" +
    "\uffbd\046\uffbd\052\uffbd\056\uffbd\060\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\072\uffbd\073" +
    "\uffbd\001\002\000\064\003\uffba\005\uffba\013\237\014\uffba" +
    "\022\uffba\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035" +
    "\uffba\037\uffba\046\uffba\052\uffba\056\uffba\060\uffba\061\uffba" +
    "\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba\072" +
    "\uffba\073\uffba\001\002\000\032\003\131\004\117\006\126" +
    "\007\123\023\124\032\121\046\130\047\125\056\133\070" +
    "\127\071\122\073\120\001\002\000\112\003\uffb9\005\uffb9" +
    "\010\137\011\143\012\144\014\uffb9\015\146\016\140\017" +
    "\142\020\134\021\147\022\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\037\uffb9\044\145\045\136\046" +
    "\uffb9\051\141\052\uffb9\054\uffb9\056\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\072" +
    "\uffb9\073\uffb9\001\002\000\004\073\242\001\002\000\066" +
    "\003\uffbb\005\uffbb\013\243\014\uffbb\022\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\046\uffbb" +
    "\052\uffbb\054\uffbb\056\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\072\uffbb\073\uffbb" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\112\003\uffbc\005\uffbc\010\137\011" +
    "\143\012\144\014\uffbc\015\146\016\140\017\142\020\134" +
    "\021\147\022\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\037\uffbc\044\145\045\136\046\uffbc\051\141" +
    "\052\uffbc\054\uffbc\056\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\072\uffbc\073\uffbc" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\032\010\137\011\143\012\144\015" +
    "\146\016\140\017\142\020\134\021\147\024\247\044\145" +
    "\045\136\051\141\001\002\000\056\003\105\005\024\022" +
    "\030\027\070\030\111\031\101\033\102\034\060\036\252" +
    "\046\033\052\066\056\075\060\063\061\106\062\110\063" +
    "\073\064\107\065\062\066\115\067\103\072\104\073\077" +
    "\001\002\000\060\003\uffaa\005\uffaa\022\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa\046\uffaa" +
    "\052\uffaa\056\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\072\uffaa\073\uffaa\001\002" +
    "\000\060\003\uffc3\005\uffc3\022\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\046\uffc3\052\uffc3" +
    "\056\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\072\uffc3\073\uffc3\001\002\000\056" +
    "\003\105\005\024\022\030\027\070\030\111\031\101\033" +
    "\102\034\060\037\254\046\033\052\066\056\075\060\063" +
    "\061\106\062\110\063\073\064\107\065\062\066\115\067" +
    "\103\072\104\073\077\001\002\000\056\003\105\005\024" +
    "\022\030\027\070\030\111\031\101\033\102\034\060\037" +
    "\256\046\033\052\066\056\075\060\063\061\106\062\110" +
    "\063\073\064\107\065\062\066\115\067\103\072\104\073" +
    "\077\001\002\000\060\003\uffa9\005\uffa9\022\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9\046" +
    "\uffa9\052\uffa9\056\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\067\uffa9\072\uffa9\073\uffa9\001" +
    "\002\000\056\003\uffde\005\uffde\022\uffde\027\uffde\030\uffde" +
    "\031\uffde\033\uffde\034\uffde\037\uffde\046\uffde\052\uffde\056" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\067\uffde\072\uffde\073\uffde\001\002\000\060\003" +
    "\uffab\005\uffab\022\uffab\027\uffab\030\uffab\031\uffab\033\uffab" +
    "\034\uffab\035\uffab\037\uffab\046\uffab\052\uffab\056\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\067\uffab\072\uffab\073\uffab\001\002\000\032\003\131\004" +
    "\117\006\126\007\123\023\124\032\121\046\130\047\125" +
    "\056\133\070\127\071\122\073\120\001\002\000\032\010" +
    "\137\011\143\012\144\014\261\015\146\016\140\017\142" +
    "\020\134\021\147\044\145\045\136\051\141\001\002\000" +
    "\032\003\131\004\117\006\126\007\123\023\124\032\121" +
    "\046\130\047\125\056\133\070\127\071\122\073\120\001" +
    "\002\000\032\010\137\011\143\012\144\014\263\015\146" +
    "\016\140\017\142\020\134\021\147\044\145\045\136\051" +
    "\141\001\002\000\032\003\131\004\117\006\126\007\123" +
    "\023\124\032\121\046\130\047\125\056\133\070\127\071" +
    "\122\073\120\001\002\000\032\010\137\011\143\012\144" +
    "\014\265\015\146\016\140\017\142\020\134\021\147\044" +
    "\145\045\136\051\141\001\002\000\032\003\131\004\117" +
    "\006\126\007\123\023\124\032\121\046\130\047\125\056" +
    "\133\070\127\071\122\073\120\001\002\000\032\010\137" +
    "\011\143\012\144\014\267\015\146\016\140\017\142\020" +
    "\134\021\147\044\145\045\136\051\141\001\002\000\032" +
    "\003\131\004\117\006\126\007\123\023\124\032\121\046" +
    "\130\047\125\056\133\070\127\071\122\073\120\001\002" +
    "\000\032\010\137\011\143\012\144\014\271\015\146\016" +
    "\140\017\142\020\134\021\147\044\145\045\136\051\141" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\032\010\137\011\143\012\144\014" +
    "\273\015\146\016\140\017\142\020\134\021\147\044\145" +
    "\045\136\051\141\001\002\000\032\003\131\004\117\006" +
    "\126\007\123\023\124\032\121\046\130\047\125\056\133" +
    "\070\127\071\122\073\120\001\002\000\032\010\137\011" +
    "\143\012\144\014\275\015\146\016\140\017\142\020\134" +
    "\021\147\044\145\045\136\051\141\001\002\000\032\003" +
    "\131\004\117\006\126\007\123\023\124\032\121\046\130" +
    "\047\125\056\133\070\127\071\122\073\120\001\002\000" +
    "\032\010\137\011\143\012\144\014\277\015\146\016\140" +
    "\017\142\020\134\021\147\044\145\045\136\051\141\001" +
    "\002\000\032\003\131\004\117\006\126\007\123\023\124" +
    "\032\121\046\130\047\125\056\133\070\127\071\122\073" +
    "\120\001\002\000\032\010\137\011\143\012\144\014\301" +
    "\015\146\016\140\017\142\020\134\021\147\044\145\045" +
    "\136\051\141\001\002\000\032\003\131\004\117\006\126" +
    "\007\123\023\124\032\121\046\130\047\125\056\133\070" +
    "\127\071\122\073\120\001\002\000\032\010\137\011\143" +
    "\012\144\015\146\016\140\017\142\020\134\021\147\024" +
    "\303\044\145\045\136\051\141\001\002\000\060\003\uffd3" +
    "\005\uffd3\022\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\037\uffd3\046\uffd3\052\uffd3\056\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067" +
    "\uffd3\072\uffd3\073\uffd3\001\002\000\032\003\131\004\117" +
    "\006\126\007\123\023\124\032\121\046\130\047\125\056" +
    "\133\070\127\071\122\073\120\001\002\000\032\010\137" +
    "\011\143\012\144\014\306\015\146\016\140\017\142\020" +
    "\134\021\147\044\145\045\136\051\141\001\002\000\032" +
    "\003\131\004\117\006\126\007\123\023\124\032\121\046" +
    "\130\047\125\056\133\070\127\071\122\073\120\001\002" +
    "\000\032\010\137\011\143\012\144\014\310\015\146\016" +
    "\140\017\142\020\134\021\147\044\145\045\136\051\141" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\032\010\137\011\143\012\144\014" +
    "\312\015\146\016\140\017\142\020\134\021\147\044\145" +
    "\045\136\051\141\001\002\000\032\003\131\004\117\006" +
    "\126\007\123\023\124\032\121\046\130\047\125\056\133" +
    "\070\127\071\122\073\120\001\002\000\032\010\137\011" +
    "\143\012\144\014\314\015\146\016\140\017\142\020\134" +
    "\021\147\044\145\045\136\051\141\001\002\000\032\003" +
    "\131\004\117\006\126\007\123\023\124\032\121\046\130" +
    "\047\125\056\133\070\127\071\122\073\120\001\002\000" +
    "\032\010\137\011\143\012\144\014\316\015\146\016\140" +
    "\017\142\020\134\021\147\044\145\045\136\051\141\001" +
    "\002\000\032\003\131\004\117\006\126\007\123\023\124" +
    "\032\121\046\130\047\125\056\133\070\127\071\122\073" +
    "\120\001\002\000\032\010\137\011\143\012\144\014\320" +
    "\015\146\016\140\017\142\020\134\021\147\044\145\045" +
    "\136\051\141\001\002\000\032\003\131\004\117\006\126" +
    "\007\123\023\124\032\121\046\130\047\125\056\133\070" +
    "\127\071\122\073\120\001\002\000\032\010\137\011\143" +
    "\012\144\014\322\015\146\016\140\017\142\020\134\021" +
    "\147\044\145\045\136\051\141\001\002\000\032\003\131" +
    "\004\117\006\126\007\123\023\124\032\121\046\130\047" +
    "\125\056\133\070\127\071\122\073\120\001\002\000\032" +
    "\010\137\011\143\012\144\015\146\016\140\017\142\020" +
    "\134\021\147\024\324\044\145\045\136\051\141\001\002" +
    "\000\060\003\uffd1\005\uffd1\022\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\046\uffd1\052\uffd1" +
    "\056\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\067\uffd1\072\uffd1\073\uffd1\001\002\000\032" +
    "\003\131\004\117\006\126\007\123\023\124\032\121\046" +
    "\130\047\125\056\133\070\127\071\122\073\120\001\002" +
    "\000\032\010\137\011\143\012\144\014\327\015\146\016" +
    "\140\017\142\020\134\021\147\044\145\045\136\051\141" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\032\010\137\011\143\012\144\014" +
    "\331\015\146\016\140\017\142\020\134\021\147\044\145" +
    "\045\136\051\141\001\002\000\032\003\131\004\117\006" +
    "\126\007\123\023\124\032\121\046\130\047\125\056\133" +
    "\070\127\071\122\073\120\001\002\000\032\010\137\011" +
    "\143\012\144\014\333\015\146\016\140\017\142\020\134" +
    "\021\147\044\145\045\136\051\141\001\002\000\032\003" +
    "\131\004\117\006\126\007\123\023\124\032\121\046\130" +
    "\047\125\056\133\070\127\071\122\073\120\001\002\000" +
    "\032\010\137\011\143\012\144\014\335\015\146\016\140" +
    "\017\142\020\134\021\147\044\145\045\136\051\141\001" +
    "\002\000\032\003\131\004\117\006\126\007\123\023\124" +
    "\032\121\046\130\047\125\056\133\070\127\071\122\073" +
    "\120\001\002\000\032\010\137\011\143\012\144\014\337" +
    "\015\146\016\140\017\142\020\134\021\147\044\145\045" +
    "\136\051\141\001\002\000\032\003\131\004\117\006\126" +
    "\007\123\023\124\032\121\046\130\047\125\056\133\070" +
    "\127\071\122\073\120\001\002\000\032\010\137\011\143" +
    "\012\144\015\146\016\140\017\142\020\134\021\147\024" +
    "\341\044\145\045\136\051\141\001\002\000\060\003\uffd4" +
    "\005\uffd4\022\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\037\uffd4\046\uffd4\052\uffd4\056\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\072\uffd4\073\uffd4\001\002\000\032\003\131\004\117" +
    "\006\126\007\123\023\124\032\121\046\130\047\125\056" +
    "\133\070\127\071\122\073\120\001\002\000\032\010\137" +
    "\011\143\012\144\015\146\016\140\017\142\020\134\021" +
    "\147\024\344\044\145\045\136\051\141\001\002\000\060" +
    "\003\uffce\005\uffce\022\uffce\027\uffce\030\uffce\031\uffce\033" +
    "\uffce\034\uffce\035\uffce\037\uffce\046\uffce\052\uffce\056\uffce" +
    "\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066" +
    "\uffce\067\uffce\072\uffce\073\uffce\001\002\000\014\005\024" +
    "\022\030\046\033\056\352\073\346\001\002\000\020\011" +
    "\uffb5\012\uffb5\013\uffb5\025\206\050\uffb5\051\362\073\uffe1" +
    "\001\002\000\004\014\355\001\002\000\004\014\uffc5\001" +
    "\002\000\004\014\uffc4\001\002\000\004\051\353\001\002" +
    "\000\004\073\354\001\002\000\012\011\uffb4\012\uffb4\013" +
    "\uffb4\050\uffb4\001\002\000\032\003\131\004\117\006\126" +
    "\007\123\023\124\032\121\046\130\047\125\056\133\070" +
    "\127\071\122\073\120\001\002\000\032\010\137\011\143" +
    "\012\144\014\357\015\146\016\140\017\142\020\134\021" +
    "\147\044\145\045\136\051\141\001\002\000\006\056\352" +
    "\073\361\001\002\000\004\024\365\001\002\000\016\011" +
    "\uffb5\012\uffb5\013\uffb5\025\206\050\uffb5\051\362\001\002" +
    "\000\004\073\364\001\002\000\014\011\uffb2\012\uffb2\013" +
    "\uffb2\025\222\050\uffb2\001\002\000\012\011\uffb3\012\uffb3" +
    "\013\uffb3\050\uffb3\001\002\000\056\003\105\005\024\022" +
    "\030\027\070\030\111\031\101\033\102\034\060\036\252" +
    "\046\033\052\066\056\075\060\063\061\106\062\110\063" +
    "\073\064\107\065\062\066\115\067\103\072\104\073\077" +
    "\001\002\000\060\003\uffc6\005\uffc6\022\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\046\uffc6" +
    "\052\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\067\uffc6\072\uffc6\073\uffc6\001\002" +
    "\000\032\003\131\004\117\006\126\007\123\023\124\032" +
    "\121\046\130\047\125\056\133\070\127\071\122\073\120" +
    "\001\002\000\032\003\uffb1\004\uffb1\006\uffb1\007\uffb1\023" +
    "\uffb1\032\uffb1\046\uffb1\047\uffb1\056\uffb1\070\uffb1\071\uffb1" +
    "\073\uffb1\001\002\000\064\003\uffb7\005\uffb7\014\uffb7\022" +
    "\uffb7\024\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\037\uffb7\046\uffb7\052\uffb7\056\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\072\uffb7\073\uffb7\001\002\000\032\003\uffb0\004\uffb0\006" +
    "\uffb0\007\uffb0\023\uffb0\032\uffb0\046\uffb0\047\uffb0\056\uffb0" +
    "\070\uffb0\071\uffb0\073\uffb0\001\002\000\064\003\uffb6\005" +
    "\uffb6\014\uffb6\022\uffb6\024\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\037\uffb6\046\uffb6\052\uffb6\056" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\072\uffb6\073\uffb6\001\002\000\112\003" +
    "\uffb8\005\uffb8\010\137\011\143\012\144\014\uffb8\015\146" +
    "\016\140\017\142\020\134\021\147\022\uffb8\024\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8" +
    "\044\145\045\136\046\uffb8\051\141\052\uffb8\056\uffb8\060" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\067\uffb8\072\uffb8\073\uffb8\001\002\000\006\056\u0101\073" +
    "\u0103\001\002\000\034\003\131\004\117\006\126\007\123" +
    "\023\124\024\uffac\032\121\046\130\047\125\056\133\070" +
    "\127\071\122\073\120\001\002\000\004\024\u0100\001\002" +
    "\000\062\003\uffc1\005\uffc1\022\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\037\uffc1\046\uffc1\051\uffc1" +
    "\052\uffc1\056\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\072\uffc1\073\uffc1\001\002" +
    "\000\004\051\u0108\001\002\000\062\003\uffbf\005\uffbf\022" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\037\uffbf\046\uffbf\051\uffbf\052\uffbf\056\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf" +
    "\072\uffbf\073\uffbf\001\002\000\016\011\uffb3\012\uffb3\013" +
    "\uffb3\023\376\050\uffb3\051\u0104\001\002\000\006\056\u0101" +
    "\073\u0105\001\002\000\006\023\376\051\u0104\001\002\000" +
    "\006\056\u0101\073\u0105\001\002\000\062\003\uffbe\005\uffbe" +
    "\022\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\037\uffbe\046\uffbe\051\uffbe\052\uffbe\056\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067" +
    "\uffbe\072\uffbe\073\uffbe\001\002\000\006\056\u0101\073\u0105" +
    "\001\002\000\062\003\uffc0\005\uffc0\022\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\037\uffc0\046\uffc0" +
    "\051\uffc0\052\uffc0\056\uffc0\060\uffc0\061\uffc0\062\uffc0\063" +
    "\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\072\uffc0\073\uffc0" +
    "\001\002\000\006\056\u0101\073\u010b\001\002\000\016\011" +
    "\uffb4\012\uffb4\013\uffb4\023\376\050\uffb4\051\u0104\001\002" +
    "\000\032\003\131\004\117\006\126\007\123\023\124\032" +
    "\121\046\130\047\125\056\133\070\127\071\122\073\120" +
    "\001\002\000\032\010\137\011\143\012\144\014\u010e\015" +
    "\146\016\140\017\142\020\134\021\147\044\145\045\136" +
    "\051\141\001\002\000\032\003\131\004\117\006\126\007" +
    "\123\023\124\032\121\046\130\047\125\056\133\070\127" +
    "\071\122\073\120\001\002\000\032\010\137\011\143\012" +
    "\144\014\u0110\015\146\016\140\017\142\020\134\021\147" +
    "\044\145\045\136\051\141\001\002\000\032\003\131\004" +
    "\117\006\126\007\123\023\124\032\121\046\130\047\125" +
    "\056\133\070\127\071\122\073\120\001\002\000\032\010" +
    "\137\011\143\012\144\014\u0112\015\146\016\140\017\142" +
    "\020\134\021\147\044\145\045\136\051\141\001\002\000" +
    "\032\003\131\004\117\006\126\007\123\023\124\032\121" +
    "\046\130\047\125\056\133\070\127\071\122\073\120\001" +
    "\002\000\032\010\137\011\143\012\144\014\u0114\015\146" +
    "\016\140\017\142\020\134\021\147\044\145\045\136\051" +
    "\141\001\002\000\032\003\131\004\117\006\126\007\123" +
    "\023\124\032\121\046\130\047\125\056\133\070\127\071" +
    "\122\073\120\001\002\000\032\010\137\011\143\012\144" +
    "\014\u0116\015\146\016\140\017\142\020\134\021\147\044" +
    "\145\045\136\051\141\001\002\000\032\003\131\004\117" +
    "\006\126\007\123\023\124\032\121\046\130\047\125\056" +
    "\133\070\127\071\122\073\120\001\002\000\032\010\137" +
    "\011\143\012\144\014\u0118\015\146\016\140\017\142\020" +
    "\134\021\147\044\145\045\136\051\141\001\002\000\032" +
    "\003\131\004\117\006\126\007\123\023\124\032\121\046" +
    "\130\047\125\056\133\070\127\071\122\073\120\001\002" +
    "\000\032\010\137\011\143\012\144\014\u011a\015\146\016" +
    "\140\017\142\020\134\021\147\044\145\045\136\051\141" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\032\010\137\011\143\012\144\015" +
    "\146\016\140\017\142\020\134\021\147\024\u011c\044\145" +
    "\045\136\051\141\001\002\000\060\003\uffd2\005\uffd2\022" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\037\uffd2\046\uffd2\052\uffd2\056\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\072\uffd2" +
    "\073\uffd2\001\002\000\004\030\u011e\001\002\000\004\023" +
    "\u011f\001\002\000\032\003\131\004\117\006\126\007\123" +
    "\023\124\032\121\046\130\047\125\056\133\070\127\071" +
    "\122\073\120\001\002\000\032\010\137\011\143\012\144" +
    "\015\146\016\140\017\142\020\134\021\147\024\u0121\044" +
    "\145\045\136\051\141\001\002\000\060\003\uffc2\005\uffc2" +
    "\022\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\037\uffc2\046\uffc2\052\uffc2\056\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\072" +
    "\uffc2\073\uffc2\001\002\000\106\003\uffcb\005\uffcb\010\137" +
    "\011\143\012\144\015\146\016\140\017\142\020\134\021" +
    "\147\022\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\037\uffcb\044\145\045\136\046\uffcb\051\141\052" +
    "\uffcb\056\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\067\uffcb\072\uffcb\073\uffcb\001\002\000" +
    "\020\003\uffed\005\uffed\022\uffed\037\uffed\046\uffed\054\uffed" +
    "\073\uffed\001\002\000\032\003\131\004\117\006\126\007" +
    "\123\023\124\032\121\046\130\047\125\056\133\070\127" +
    "\071\122\073\120\001\002\000\032\010\137\011\143\012" +
    "\144\014\u0126\015\146\016\140\017\142\020\134\021\147" +
    "\044\145\045\136\051\141\001\002\000\032\003\131\004" +
    "\117\006\126\007\123\023\124\032\121\046\130\047\125" +
    "\056\133\070\127\071\122\073\120\001\002\000\032\010" +
    "\137\011\143\012\144\014\u0128\015\146\016\140\017\142" +
    "\020\134\021\147\044\145\045\136\051\141\001\002\000" +
    "\032\003\131\004\117\006\126\007\123\023\124\032\121" +
    "\046\130\047\125\056\133\070\127\071\122\073\120\001" +
    "\002\000\032\010\137\011\143\012\144\014\u012a\015\146" +
    "\016\140\017\142\020\134\021\147\044\145\045\136\051" +
    "\141\001\002\000\032\003\131\004\117\006\126\007\123" +
    "\023\124\032\121\046\130\047\125\056\133\070\127\071" +
    "\122\073\120\001\002\000\032\010\137\011\143\012\144" +
    "\014\u012c\015\146\016\140\017\142\020\134\021\147\044" +
    "\145\045\136\051\141\001\002\000\032\003\131\004\117" +
    "\006\126\007\123\023\124\032\121\046\130\047\125\056" +
    "\133\070\127\071\122\073\120\001\002\000\032\010\137" +
    "\011\143\012\144\014\u012e\015\146\016\140\017\142\020" +
    "\134\021\147\044\145\045\136\051\141\001\002\000\032" +
    "\003\131\004\117\006\126\007\123\023\124\032\121\046" +
    "\130\047\125\056\133\070\127\071\122\073\120\001\002" +
    "\000\032\010\137\011\143\012\144\014\u0130\015\146\016" +
    "\140\017\142\020\134\021\147\044\145\045\136\051\141" +
    "\001\002\000\032\003\131\004\117\006\126\007\123\023" +
    "\124\032\121\046\130\047\125\056\133\070\127\071\122" +
    "\073\120\001\002\000\032\010\137\011\143\012\144\015" +
    "\146\016\140\017\142\020\134\021\147\024\u0132\044\145" +
    "\045\136\051\141\001\002\000\060\003\uffd5\005\uffd5\022" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\037\uffd5\046\uffd5\052\uffd5\056\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\072\uffd5" +
    "\073\uffd5\001\002\000\032\003\131\004\117\006\126\007" +
    "\123\023\124\032\121\046\130\047\125\056\133\070\127" +
    "\071\122\073\120\001\002\000\032\010\137\011\143\012" +
    "\144\014\u0135\015\146\016\140\017\142\020\134\021\147" +
    "\044\145\045\136\051\141\001\002\000\032\003\131\004" +
    "\117\006\126\007\123\023\124\032\121\046\130\047\125" +
    "\056\133\070\127\071\122\073\120\001\002\000\032\010" +
    "\137\011\143\012\144\014\u0137\015\146\016\140\017\142" +
    "\020\134\021\147\044\145\045\136\051\141\001\002\000" +
    "\032\003\131\004\117\006\126\007\123\023\124\032\121" +
    "\046\130\047\125\056\133\070\127\071\122\073\120\001" +
    "\002\000\032\010\137\011\143\012\144\014\u0139\015\146" +
    "\016\140\017\142\020\134\021\147\044\145\045\136\051" +
    "\141\001\002\000\032\003\131\004\117\006\126\007\123" +
    "\023\124\032\121\046\130\047\125\056\133\070\127\071" +
    "\122\073\120\001\002\000\032\010\137\011\143\012\144" +
    "\014\u013b\015\146\016\140\017\142\020\134\021\147\044" +
    "\145\045\136\051\141\001\002\000\032\003\131\004\117" +
    "\006\126\007\123\023\124\032\121\046\130\047\125\056" +
    "\133\070\127\071\122\073\120\001\002\000\032\010\137" +
    "\011\143\012\144\014\u013d\015\146\016\140\017\142\020" +
    "\134\021\147\044\145\045\136\051\141\001\002\000\032" +
    "\003\131\004\117\006\126\007\123\023\124\032\121\046" +
    "\130\047\125\056\133\070\127\071\122\073\120\001\002" +
    "\000\032\010\137\011\143\012\144\015\146\016\140\017" +
    "\142\020\134\021\147\024\u013f\044\145\045\136\051\141" +
    "\001\002\000\060\003\uffd0\005\uffd0\022\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\046\uffd0" +
    "\052\uffd0\056\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\067\uffd0\072\uffd0\073\uffd0\001\002" +
    "\000\032\003\131\004\117\006\126\007\123\023\124\032" +
    "\121\046\130\047\125\056\133\070\127\071\122\073\120" +
    "\001\002\000\032\010\137\011\143\012\144\015\146\016" +
    "\140\017\142\020\134\021\147\024\u0142\044\145\045\136" +
    "\051\141\001\002\000\056\003\105\005\024\022\030\027" +
    "\070\030\111\031\101\033\102\034\060\036\252\046\033" +
    "\052\066\056\075\060\063\061\106\062\110\063\073\064" +
    "\107\065\062\066\115\067\103\072\104\073\077\001\002" +
    "\000\060\003\uffc7\005\uffc7\022\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\033\uffc7\034\uffc7\035\u0144\037\uffc7\046\uffc7\052\uffc7" +
    "\056\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\072\uffc7\073\uffc7\001\002\000\056" +
    "\003\105\005\024\022\030\027\070\030\111\031\101\033" +
    "\102\034\060\036\252\046\033\052\066\056\075\060\063" +
    "\061\106\062\110\063\073\064\107\065\062\066\115\067" +
    "\103\072\104\073\077\001\002\000\060\003\uffc9\005\uffc9" +
    "\022\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\037\uffc9\046\uffc9\052\uffc9\056\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\072" +
    "\uffc9\073\uffc9\001\002\000\060\003\uffc8\005\uffc8\022\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\037" +
    "\uffc8\046\uffc8\052\uffc8\056\uffc8\060\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\072\uffc8\073" +
    "\uffc8\001\002\000\006\014\uffe7\024\uffe7\001\002\000\022" +
    "\003\uffea\005\uffea\014\241\022\uffea\037\uffea\046\uffea\054" +
    "\uffea\073\uffea\001\002\000\026\003\uffba\005\uffba\013\237" +
    "\014\uffba\022\uffba\023\u014a\037\uffba\046\uffba\054\uffba\073" +
    "\uffba\001\002\000\020\003\050\005\024\014\uffe6\022\030" +
    "\024\uffe6\046\033\073\023\001\002\000\006\014\054\024" +
    "\u014c\001\002\000\004\036\u014d\001\002\000\056\003\105" +
    "\005\024\022\030\027\070\030\111\031\101\033\102\034" +
    "\060\037\uffeb\046\033\052\066\056\075\060\063\061\106" +
    "\062\110\063\073\064\107\065\062\066\115\067\103\072" +
    "\104\073\077\001\002\000\004\037\u014f\001\002\000\020" +
    "\003\uffef\005\uffef\022\uffef\037\uffef\046\uffef\054\uffef\073" +
    "\uffef\001\002\000\022\003\uffe9\005\uffe9\014\241\022\uffe9" +
    "\037\uffe9\046\uffe9\054\uffe9\073\uffe9\001\002\000\026\003" +
    "\uffba\005\uffba\013\237\014\uffba\022\uffba\023\u0152\037\uffba" +
    "\046\uffba\054\uffba\073\uffba\001\002\000\020\003\050\005" +
    "\024\014\uffe6\022\030\024\uffe6\046\033\073\023\001\002" +
    "\000\006\014\054\024\u0154\001\002\000\004\036\u0155\001" +
    "\002\000\056\003\105\005\024\022\030\027\070\030\111" +
    "\031\101\033\102\034\060\037\uffeb\046\033\052\066\056" +
    "\075\060\063\061\106\062\110\063\073\064\107\065\062" +
    "\066\115\067\103\072\104\073\077\001\002\000\004\037" +
    "\u0157\001\002\000\020\003\uffee\005\uffee\022\uffee\037\uffee" +
    "\046\uffee\054\uffee\073\uffee\001\002\000\004\036\ufff8\001" +
    "\002\000\004\002\000\001\002\000\006\054\ufffd\057\ufffd" +
    "\001\002\000\004\073\u015c\001\002\000\004\051\u015d\001" +
    "\002\000\004\073\u015e\001\002\000\004\010\u015f\001\002" +
    "\000\006\054\ufffb\057\ufffb\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015e\000\012\002\006\003\010\004\004\005\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\u0159\005" +
    "\u0158\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\017\001\001\000\002\001\001\000\012\006\031" +
    "\007\021\010\026\035\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u014f\001\001" +
    "\000\004\035\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\035\010\036\035\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0147\001\001\000\002" +
    "\001\001\000\006\035\050\036\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\012\066\013\060\014\071\015\113\016\064" +
    "\017\070\021\075\022\111\024\073\032\077\033\063\035" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u0121\001\001\000\026\013\254\014\071" +
    "\015\113\016\064\017\070\021\075\022\111\024\073\032" +
    "\077\035\112\001\001\000\030\013\247\014\071\015\113" +
    "\016\064\017\070\021\075\022\111\024\073\025\u011c\032" +
    "\077\035\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\362\001\001\000\004\040\366" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\131\001\001\000\002\001" +
    "\001\000\004\030\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\174\001\001\000" +
    "\004\031\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\167\001\001\000\004" +
    "\031\157\001\001\000\004\031\156\001\001\000\004\031" +
    "\155\001\001\000\004\031\154\001\001\000\004\031\153" +
    "\001\001\000\004\031\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\151\001\001\000\004\031\150" +
    "\001\001\000\004\031\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\161\001\001\000\002" +
    "\001\001\000\004\031\163\001\001\000\002\001\001\000" +
    "\004\031\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\177\001\001\000\002\001" +
    "\001\000\004\031\201\001\001\000\002\001\001\000\004" +
    "\031\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\217\001\001\000\004\031\216\001\001\000\010" +
    "\011\211\031\212\034\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\211\031\212\034\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\232\031" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\243\001\001\000\002\001\001\000\004\031\245\001" +
    "\001\000\002\001\001\000\030\013\247\014\071\015\113" +
    "\016\064\017\070\021\075\022\111\024\073\025\250\032" +
    "\077\035\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\012\252\013\060\014\071\015\113\016\064\017" +
    "\070\021\075\022\111\024\073\032\077\035\112\001\001" +
    "\000\026\013\254\014\071\015\113\016\064\017\070\021" +
    "\075\022\111\024\073\032\077\035\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\257\001\001\000\002\001\001\000\004\031\261\001\001" +
    "\000\002\001\001\000\004\031\263\001\001\000\002\001" +
    "\001\000\004\031\265\001\001\000\002\001\001\000\004" +
    "\031\267\001\001\000\002\001\001\000\004\031\271\001" +
    "\001\000\002\001\001\000\004\031\273\001\001\000\002" +
    "\001\001\000\004\031\275\001\001\000\002\001\001\000" +
    "\004\031\277\001\001\000\002\001\001\000\004\031\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\304\001\001\000\002\001\001\000\004\031\306\001\001" +
    "\000\002\001\001\000\004\031\310\001\001\000\002\001" +
    "\001\000\004\031\312\001\001\000\002\001\001\000\004" +
    "\031\314\001\001\000\002\001\001\000\004\031\316\001" +
    "\001\000\002\001\001\000\004\031\320\001\001\000\002" +
    "\001\001\000\004\031\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\325\001\001\000\002\001\001" +
    "\000\004\031\327\001\001\000\002\001\001\000\004\031" +
    "\331\001\001\000\002\001\001\000\004\031\333\001\001" +
    "\000\002\001\001\000\004\031\335\001\001\000\002\001" +
    "\001\000\004\031\337\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\347\024\350\027\346\032\077" +
    "\035\112\001\001\000\004\030\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\355\001" +
    "\001\000\002\001\001\000\006\024\357\032\077\001\001" +
    "\000\002\001\001\000\004\030\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\013\247" +
    "\014\071\015\113\016\064\017\070\021\075\022\111\024" +
    "\073\025\365\032\077\035\112\001\001\000\002\001\001" +
    "\000\004\031\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0101\001\001\000\010\011\211\031\212\034" +
    "\376\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u0101\001\001\000\002\001\001\000\004\021\u0106\001\001" +
    "\000\002\001\001\000\004\021\u0108\001\001\000\002\001" +
    "\001\000\004\021\u0108\001\001\000\002\001\001\000\004" +
    "\031\u010c\001\001\000\002\001\001\000\004\031\u010e\001" +
    "\001\000\002\001\001\000\004\031\u0110\001\001\000\002" +
    "\001\001\000\004\031\u0112\001\001\000\002\001\001\000" +
    "\004\031\u0114\001\001\000\002\001\001\000\004\031\u0116" +
    "\001\001\000\002\001\001\000\004\031\u0118\001\001\000" +
    "\002\001\001\000\004\031\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u011f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\u0124\001" +
    "\001\000\002\001\001\000\004\031\u0126\001\001\000\002" +
    "\001\001\000\004\031\u0128\001\001\000\002\001\001\000" +
    "\004\031\u012a\001\001\000\002\001\001\000\004\031\u012c" +
    "\001\001\000\002\001\001\000\004\031\u012e\001\001\000" +
    "\002\001\001\000\004\031\u0130\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\u0133\001\001\000\002\001" +
    "\001\000\004\031\u0135\001\001\000\002\001\001\000\004" +
    "\031\u0137\001\001\000\002\001\001\000\004\031\u0139\001" +
    "\001\000\002\001\001\000\004\031\u013b\001\001\000\002" +
    "\001\001\000\004\031\u013d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u0140\001\001\000\002\001\001" +
    "\000\030\013\247\014\071\015\113\016\064\017\070\021" +
    "\075\022\111\024\073\025\u0142\032\077\035\112\001\001" +
    "\000\004\026\u0144\001\001\000\030\013\247\014\071\015" +
    "\113\016\064\017\070\021\075\022\111\024\073\025\u0145" +
    "\032\077\035\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\050\036\u014a\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\012\066\013\060\014\071\015\113" +
    "\016\064\017\070\021\075\022\111\024\073\032\077\033" +
    "\u014d\035\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\050\036" +
    "\u0152\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\012\066\013\060\014\071\015\113\016\064\017\070\021" +
    "\075\022\111\024\073\032\077\033\u0155\035\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserLenguaje$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserLenguaje$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserLenguaje$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public List<String> archivos = new LinkedList<String>();
    public Clase clase;
    public String ruta = "";


    public void syntax_error(Symbol s)
    {
	String nombreClase = (clase != null) ? clase.getNombre(): "---";
        CompiladorLenguaje.errores.add(new ErrorC("Sintactico", "CLASE: \""+nombreClase+"\" --- El simbolo \""+((CompLex)s.value).getLexema()+"\" no cumple con la sintaxis.",((CompLex)s.value).getLinea(), ((CompLex)s.value).getColumna()));
        System.out.println("["+((CompLex)s.value).getLinea()+","+((CompLex)s.value).getColumna()+"]"+"\tEl simbolo \""+((CompLex)s.value).getLexema()+"\" no cumple con la sintaxis.\t"+"sym="+s.sym+" CLASE:" + nombreClase);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserLenguaje$actions {


    public void agregarError(String tipo, String descripcion, int linea, int columna){
	CompiladorLenguaje.errores.add(new ErrorC(tipo, descripcion, linea, columna));
    }

    public void declararVariables(String ambito, String tipo, String ids, int linea, int columna, boolean miembro){
	if (ids != null) {
            for (String id: ids.split(";")) {
                if (parser.clase.getTablasSimbolos().getLast().containsKey(id)) {
                    agregarError("Semantico", "La variable \"" + id + "\" ya ha sido declarada.", linea, columna);
                } else {
                    parser.clase.getTablasSimbolos().agregarSimbolo(new Simbolo(id, tipo, (ambito != null && ambito.equals("public")), parser.clase.getTablasSimbolos().size() > 1, miembro));
                }
            }
        }
    }

    public void declararMetodo(String ambito, String nombre, String tipo, String params, int linea, int columna, NodoAST ins) {
    	if (ambito != null && nombre != null && tipo != null) {
            boolean isPublic = ambito.equals("public");
            String firma = nombre;
            if (params != null){
                for (String param : params.split(";;;")) {
                    firma += "_" + param.split(":::")[0];
                }
            }
            firma = firma.replaceAll(":", "_");
            if (parser.clase.getMetodos().containsKey(firma)) {
                agregarError("Semantico", "El metodo \"" + firma + "\" ya ha sido declarado.", linea, columna);
            } else {
                parser.clase.getMetodos().put(firma, new Simbolo(firma, "metodo", tipo, isPublic, true, true, params, ins));
            }
        }
    }


  private final ParserLenguaje parser;

  /** Constructor */
  CUP$ParserLenguaje$actions(ParserLenguaje parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserLenguaje$do_action(
    int                        CUP$ParserLenguaje$act_num,
    java_cup.runtime.lr_parser CUP$ParserLenguaje$parser,
    java.util.Stack            CUP$ParserLenguaje$stack,
    int                        CUP$ParserLenguaje$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserLenguaje$result;

      /* select the action based on the action number */
      switch (CUP$ParserLenguaje$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // L_CORCHETES ::= corcheteI EXPRESION corcheteD 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	if (e1 != null){
		NodoAST n = new NodoAST(NodoAST.VALORES, e1.getLinea());
		n.getHijos().add(e1);
		RESULT = n;
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_CORCHETES",22, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // L_CORCHETES ::= L_CORCHETES corcheteI EXPRESION corcheteD 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	if (n != null && e1 != null) {
        	n.getHijos().add(e1);
	        RESULT = n;
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_CORCHETES",22, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= error 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= id pareI L_VALS_OP pareD 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST vals = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	RESULT = new NodoAST(NodoAST.LLAMARFUNCION, null, id1.getLexema(), id1.getLinea());
	if (vals != null){
		RESULT.getHijos().add(vals);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= pareI id pareD EXPRESION 
            {
              NodoAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		CompLex t = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (e1 != null){
		RESULT = new NodoAST(NodoAST.CASTEO, t.getLexema(), e1.getLinea());
		RESULT.getHijos().add(e1);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= pareI tipoDato pareD EXPRESION 
            {
              NodoAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		CompLex t = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (e1 != null){
                RESULT = new NodoAST(NodoAST.CASTEO, t.getLexema(), e1.getLinea());
                RESULT.getHijos().add(e1);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= pareI EXPRESION pareD 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	RESULT = e1;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= ampersand EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (e1 != null){
		RESULT = new NodoAST(NodoAST.AMPERSAND, e1.getLinea());
		RESULT.getHijos().add(e1);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= pareI EXPRESION pareD interrogacion EXPRESION dosPuntos EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e3 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (e1 != null && e2 != null && e3 != null){
		RESULT = new NodoAST(NodoAST.OPTERNARIO, e1.getLinea());
		RESULT.getHijos().add(e1);
		RESULT.getHijos().add(e2);
		RESULT.getHijos().add(e3);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= notS EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (e1 != null) {
		RESULT = new NodoAST(NodoAST.NOT, e1.getLinea());
		RESULT.getHijos().add(e1);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= id L_CORCHETES 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (n != null){
		RESULT = new NodoAST(NodoAST.VALORVEC, id1.getLinea());
		RESULT.getHijos().add(new NodoAST(NodoAST.ID, null, id1.getLexema(), id1.getLinea()));
		RESULT.getHijos().add(n);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= EXPRESION punto EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (e1 != null && e2 != null){
                RESULT = new NodoAST(NodoAST.PUNTO, e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= EXPRESION decremento 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        if (e1 != null) {
                RESULT = new NodoAST(NodoAST.DECREMENTO, e1.getLinea());
                RESULT.getHijos().add(e1);
        }       

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= EXPRESION incremento 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        if (e1 != null) {
                RESULT = new NodoAST(NodoAST.INCREMENTO, e1.getLinea());
                RESULT.getHijos().add(e1);
        }       

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= newS array pareI L_VALS pareD 
            {
              NodoAST RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST vals = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        if (vals != null) {
                RESULT = new NodoAST(NodoAST.NEWARRAY, vals.getLinea());
                RESULT.getHijos().add(vals);
        }       

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= newS id pareI L_VALS_OP pareD 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST vals = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	RESULT = new NodoAST(NodoAST.NEW, id1.getLinea());
	RESULT.setDatos1(id1.getLexema());
        if (vals != null) {
                RESULT.getHijos().addAll(vals.getHijos());
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= EXPRESION andS EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (e1 != null && e2 != null){
		RESULT = new NodoAST(NodoAST.AND, e1.getLinea());
		RESULT.getHijos().add(e1);
		RESULT.getHijos().add(e2);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPRESION orS EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (e1 != null && e2 != null){
		RESULT = new NodoAST(NodoAST.OR, e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPRESION opComparacion EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (e1 != null && e2 != null){
		RESULT = new NodoAST(NodoAST.COMPARACION, l.getLexema(), e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPRESION expo EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (e1 != null && e2 != null){
		RESULT = new NodoAST(NodoAST.EXPO, e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (e1 != null && e2 != null){
		RESULT = new NodoAST(NodoAST.DIV, e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPRESION multi EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (e1 != null && e2 != null){
		RESULT = new NodoAST(NodoAST.MULTI, e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (e1 != null && e2 != null){
		RESULT = new NodoAST(NodoAST.MENOS, e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (e1 != null && e2 != null){
		RESULT = new NodoAST(NodoAST.MAS, e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= thisS 
            {
              NodoAST RESULT =null;
		int thisoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int thisoright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex thiso = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = new NodoAST(NodoAST.ID, parser.clase.getNombre(), "this", thiso.getLinea());

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= id 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = new NodoAST(NodoAST.ID, null, id1.getLexema(), id1.getLinea());

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= caracter 
            {
              NodoAST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex v = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = new NodoAST(NodoAST.VALOR, "char", v.getLexema(), v.getLinea());

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= cadena 
            {
              NodoAST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex v = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = new NodoAST(NodoAST.VALOR, "string", v.getLexema(), v.getLinea());

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= valBool 
            {
              NodoAST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex v = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = new NodoAST(NodoAST.VALOR, "boolean", v.getLexema(), v.getLinea());

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= numDecimal 
            {
              NodoAST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex v = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = new NodoAST(NodoAST.VALOR, "float", v.getLexema(), v.getLinea());

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= numEntero 
            {
              NodoAST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex v = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = new NodoAST(NodoAST.VALOR, "int", v.getLexema(), v.getLinea());

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CUERPO_INSTRUCCION ::= llaveI llaveD 
            {
              NodoAST RESULT =null;
		
        RESULT = new NodoAST(NodoAST.VACIO, 0);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CUERPO_INSTRUCCION ::= INSTRUCCION 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (ins != null){
        	RESULT = new NodoAST(NodoAST.INSTRUCCIONES, ins.getLinea());
		RESULT.getHijos().add(ins);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CUERPO_INSTRUCCION ::= llaveI INSTRUCCIONES llaveD 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        RESULT = ins;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // L_VALS_OP ::= 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_VALS_OP",26, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // L_VALS_OP ::= L_VALS 
            {
              NodoAST RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST vals = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = vals;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_VALS_OP",26, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L_VALS ::= EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (e1 != null){
		RESULT = new NodoAST(NodoAST.VALORES, e1.getLinea());
		RESULT.getHijos().add(e1);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_VALS",7, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // L_VALS ::= L_VALS coma EXPRESION 
            {
              NodoAST RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST vals = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (vals != null && e1 != null){
                vals.getHijos().add(e1);
		RESULT = vals;
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_VALS",7, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_ASIGNACION ::= igualOperador 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex v = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = v.getLexema();

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",30, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_ASIGNACION ::= igual 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex v = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = v.getLexema();

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",30, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // L_PUNTOS ::= id L_CORCHETES 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST l = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (l != null){
		RESULT = new NodoAST(NodoAST.VALORVEC, id1.getLinea());
		RESULT.getHijos().add(new NodoAST(NodoAST.ID, null, id1.getLexema(), id1.getLinea()));
		RESULT.getHijos().add(l);
	}	

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_PUNTOS",24, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // L_PUNTOS ::= id punto id 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id2 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (id1 != null && id2 != null){
		NodoAST punto = new NodoAST(NodoAST.PUNTO, id1.getLinea());
                punto.getHijos().add(new NodoAST(NodoAST.ID, null, id1.getLexema(), id1.getLinea()));
                punto.getHijos().add(new NodoAST(NodoAST.ID, null, id2.getLexema(), id2.getLinea())); 
                RESULT = punto;
	}	

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_PUNTOS",24, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // L_PUNTOS ::= thisS punto id 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	NodoAST punto = new NodoAST(NodoAST.PUNTO, id1.getLinea());
	punto.getHijos().add(new NodoAST(NodoAST.THIS, null, "this", id1.getLinea()));
	punto.getHijos().add(new NodoAST(NodoAST.ID, null, id1.getLexema(), id1.getLinea()));
	RESULT = punto;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_PUNTOS",24, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // L_PUNTOS ::= id 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = new NodoAST(NodoAST.ID, null, id1.getLexema(), id1.getLinea());

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_PUNTOS",24, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= L_PUNTOS decremento 
            {
              NodoAST RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST val = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = new NodoAST(NodoAST.DECREMENTO, l.getLinea());
        RESULT.getHijos().add(val);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION ::= L_PUNTOS incremento 
            {
              NodoAST RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST val = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		      
	RESULT = new NodoAST(NodoAST.INCREMENTO, l.getLinea());
        RESULT.getHijos().add(val);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION ::= L_PUNTOS OP_ASIGNACION EXPRESION 
            {
              NodoAST RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST val = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = new NodoAST(NodoAST.ASIGNACION, null, "=", e1.getLinea());
        if (op.equals("=")){
	        RESULT.getHijos().add(val);
                RESULT.getHijos().add(e1);
        } else {
                String operador = op.substring(0, 1);
                int operacionNodo = 0;
                if (operador.equals("+")) operacionNodo = NodoAST.MAS;
                else if (operador.equals("-")) operacionNodo = NodoAST.MENOS;
                else if (operador.equals("*")) operacionNodo = NodoAST.MULTI;
                else if (operador.equals("/")) operacionNodo = NodoAST.DIV;
                else if (operador.equals("^")) operacionNodo = NodoAST.EXPO;
                NodoAST exp = new NodoAST(operacionNodo, val.getLinea());
                exp.getHijos().add(val);
                exp.getHijos().add(e1);
                RESULT.getHijos().add(val);
                RESULT.getHijos().add(exp);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L_IDS_DEC_VAR ::= id igual EXPRESION 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	NodoAST var = new NodoAST(NodoAST.ID, "", id1.getLexema(), id1.getLinea());
	if (e1 != null) var.getHijos().add(e1);
	RESULT = new NodoAST(NodoAST.INSTRUCCIONES, id1.getLinea());
	RESULT.getHijos().add(var);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_IDS_DEC_VAR",17, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // L_IDS_DEC_VAR ::= id 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	NodoAST var = new NodoAST(NodoAST.ID, "", id1.getLexema(), id1.getLinea());
        RESULT = new NodoAST(NodoAST.INSTRUCCIONES, id1.getLinea());
        RESULT.getHijos().add(var);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_IDS_DEC_VAR",17, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L_IDS_DEC_VAR ::= L_IDS_DEC_VAR coma id 
            {
              NodoAST RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST vars = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        NodoAST var = new NodoAST(NodoAST.ID, "", id1.getLexema(), id1.getLinea());
        if (vars == null) vars = new NodoAST(NodoAST.INSTRUCCIONES, id1.getLinea());
	RESULT = vars;
        RESULT.getHijos().add(var);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_IDS_DEC_VAR",17, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L_IDS_DEC_VAR ::= L_IDS_DEC_VAR coma id igual EXPRESION 
            {
              NodoAST RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).right;
		NodoAST vars = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        NodoAST var = new NodoAST(NodoAST.ID, "", id1.getLexema(), id1.getLinea());
        if (e1 != null) var.getHijos().add(e1);
        if (vars == null) vars = new NodoAST(NodoAST.INSTRUCCIONES, id1.getLinea());
        RESULT = vars;
        RESULT.getHijos().add(var);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_IDS_DEC_VAR",17, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DEC_VARIABLE ::= TIPO_DATO L_IDS_DEC_VAR 
            {
              NodoAST RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST vars = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (vars == null) vars = new NodoAST(NodoAST.INSTRUCCIONES, 0);
        if (tipo != null){
                RESULT = new NodoAST(NodoAST.DECLARACION, "", tipo, 0);
		RESULT.getHijos().add(vars);
        } 

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",16, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LLAMAR_FUNCION ::= LLAMAR_FUNCION punto LLAMAR_FUNCION 
            {
              NodoAST RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST n1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (n1 != null && n2 != null) {
		RESULT = new NodoAST(NodoAST.PUNTO, n1.getLinea());
		RESULT.getHijos().add(n1);
		RESULT.getHijos().add(n2);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",15, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LLAMAR_FUNCION ::= id punto LLAMAR_FUNCION 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (n != null){
		RESULT = new NodoAST(NodoAST.PUNTO, id1.getLinea());
		RESULT.getHijos().add(new NodoAST(NodoAST.ID, null, id1.getLexema(), id1.getLinea()));
		RESULT.getHijos().add(n);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",15, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LLAMAR_FUNCION ::= thisS punto LLAMAR_FUNCION 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = n;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",15, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LLAMAR_FUNCION ::= id pareI L_VALS_OP pareD 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST vals = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	RESULT = new NodoAST(NodoAST.LLAMARFUNCION, null, id1.getLexema(), id1.getLinea());
	if (vals != null){
		RESULT.getHijos().addAll(vals.getHijos());
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",15, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DOWHILE ::= doS CUERPO_INSTRUCCION whileS pareI EXPRESION pareD 
            {
              NodoAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	if (ins == null) ins = new NodoAST(NodoAST.VACIO, l.getLinea());
	if (e1 == null) ins = new NodoAST(NodoAST.VACIO, l.getLinea());
	RESULT = new NodoAST(NodoAST.DOWHILE, l.getLinea());
	RESULT.getHijos().add(e1);
	RESULT.getHijos().add(ins);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("DOWHILE",13, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WHILE ::= whileS pareI EXPRESION pareD CUERPO_INSTRUCCION 
            {
              NodoAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (ins == null) ins = new NodoAST(NodoAST.VACIO, l.getLinea());
        if (e1 == null) ins = new NodoAST(NodoAST.VACIO, l.getLinea());
        RESULT = new NodoAST(NodoAST.WHILE, l.getLinea());
        RESULT.getHijos().add(e1);
        RESULT.getHijos().add(ins);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAM1_FOR ::= ASIGNACION 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = n;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("PARAM1_FOR",21, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAM1_FOR ::= DEC_VARIABLE 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = n;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("PARAM1_FOR",21, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= forS pareI PARAM1_FOR coma EXPRESION coma ASIGNACION pareD CUERPO_INSTRUCCION 
            {
              NodoAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-8)).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-8)).value;
		int param1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).right;
		NodoAST param1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).value;
		int param3left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int param3right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		NodoAST param3 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (param1 != null && param3 != null ){
		if (ins == null) ins = new NodoAST(NodoAST.VACIO, l.getLinea());
        	if (e1 == null) e1 = new NodoAST(NodoAST.VACIO, l.getLinea());
		RESULT = new NodoAST(NodoAST.FOR, l.getLinea());
		RESULT.getHijos().add(param1);
		RESULT.getHijos().add(e1);
		RESULT.getHijos().add(param3);
		RESULT.getHijos().add(ins);

	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-8)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELSE_OP ::= 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("ELSE_OP",20, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSE_OP ::= elseS CUERPO_INSTRUCCION 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = ins;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("ELSE_OP",20, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF ::= ifS pareI EXPRESION pareD CUERPO_INSTRUCCION ELSE_OP 
            {
              NodoAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int inselseleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int inselseright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST inselse = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (inselse == null) inselse = new NodoAST(NodoAST.VACIO, l.getLinea());
	if (ins == null) ins = new NodoAST(NodoAST.VACIO, l.getLinea());
	if (e1 == null) e1 = new NodoAST(NodoAST.VACIO, l.getLinea());
	RESULT = new NodoAST(NodoAST.IF, l.getLinea());
	RESULT.getHijos().add(e1);
	RESULT.getHijos().add(ins);
	RESULT.getHijos().add(inselse);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUCCION ::= error 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUCCION ::= returnS EXPRESION 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	if (e1 != null){
		RESULT = new NodoAST(NodoAST.RETURN, e1.getLinea());
		RESULT.getHijos().add(e1);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCION ::= continueS 
            {
              NodoAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = new NodoAST(NodoAST.CONTINUE, l.getLinea());

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCCION ::= breakS 
            {
              NodoAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex l = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
      	RESULT = new NodoAST(NodoAST.BREAK, l.getLinea());

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCION ::= funImprimir pareI EXPRESION pareD 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        if (e1 != null){
                RESULT = new NodoAST(NodoAST.FUNIMPRIMIR, e1.getLinea());
                RESULT.getHijos().add(e1);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRUCCION ::= funLienzo pareI EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION pareD 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		NodoAST e3 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		NodoAST e4 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e5 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        if (e1 != null && e2 != null && e3 != null && e4 != null && e5 != null){
                RESULT = new NodoAST(NodoAST.FUNLIENZO, null, "Lienzo", e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
                RESULT.getHijos().add(e3);
                RESULT.getHijos().add(e4);
                RESULT.getHijos().add(e5);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRUCCION ::= funPoligono pareI EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION pareD 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		NodoAST e3 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		NodoAST e4 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		NodoAST e5 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e6 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        if (e1 != null && e2 != null && e3 != null && e4 != null && e5 != null && e6 != null){
                RESULT = new NodoAST(NodoAST.FUNPOLIGONO, null, "Poligono", e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
                RESULT.getHijos().add(e3);
                RESULT.getHijos().add(e4);
                RESULT.getHijos().add(e5);
                RESULT.getHijos().add(e6);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCCION ::= funOvalo pareI EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION pareD 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-15)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-15)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-15)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).right;
		NodoAST e3 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).right;
		NodoAST e4 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		NodoAST e5 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		NodoAST e6 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		NodoAST e7 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e8 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        if (e1 != null && e2 != null && e3 != null && e4 != null && e5 != null && e6 != null && e7 != null && e8 != null){
                RESULT = new NodoAST(NodoAST.FUNOVALO, null, "Ovalo", e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
                RESULT.getHijos().add(e3);
                RESULT.getHijos().add(e4);
                RESULT.getHijos().add(e5);
                RESULT.getHijos().add(e6);
                RESULT.getHijos().add(e7);
		RESULT.getHijos().add(e8);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-17)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCION ::= funRectangulo pareI EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION pareD 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-15)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-15)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-15)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).right;
		NodoAST e3 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).right;
		NodoAST e4 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		NodoAST e5 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		NodoAST e6 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		NodoAST e7 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e8 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        if (e1 != null && e2 != null && e3 != null && e4 != null && e5 != null && e6 != null && e7 != null && e8 != null){
                RESULT = new NodoAST(NodoAST.FUNRECTANGULO, null, "Rectangulo", e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
                RESULT.getHijos().add(e3);
                RESULT.getHijos().add(e4);
                RESULT.getHijos().add(e5);
                RESULT.getHijos().add(e6);
                RESULT.getHijos().add(e7);
		RESULT.getHijos().add(e8);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-17)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= funArco pareI EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION pareD 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-19)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-19)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-19)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-17)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-17)).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-17)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-15)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-15)).right;
		NodoAST e3 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-15)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).right;
		NodoAST e4 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).right;
		NodoAST e5 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).right;
		NodoAST e6 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		NodoAST e7 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		NodoAST e8 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		NodoAST e9 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e10 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        if (e1 != null && e2 != null && e3 != null && e4 != null && e5 != null && e6 != null && e7 != null && e8 != null && e9 != null && e10 != null){
                RESULT = new NodoAST(NodoAST.FUNARCO, null, "Arco", e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
                RESULT.getHijos().add(e3);
                RESULT.getHijos().add(e4);
                RESULT.getHijos().add(e5);
                RESULT.getHijos().add(e6);
                RESULT.getHijos().add(e7);
		RESULT.getHijos().add(e8);
		RESULT.getHijos().add(e9);
		RESULT.getHijos().add(e10);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-21)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION ::= funTexto pareI EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION pareD 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		NodoAST e3 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		NodoAST e4 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		NodoAST e5 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e6 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        if (e1 != null && e2 != null && e3 != null && e4 != null && e5 != null && e6 != null){
                RESULT = new NodoAST(NodoAST.FUNTEXTO, null, "Texto", e1.getLinea());
                RESULT.getHijos().add(e1);
                RESULT.getHijos().add(e2);
                RESULT.getHijos().add(e3);
                RESULT.getHijos().add(e4);
                RESULT.getHijos().add(e5);
                RESULT.getHijos().add(e6);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCION ::= funLinea pareI EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION pareD 
            {
              NodoAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-13)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-11)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).right;
		NodoAST e3 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		NodoAST e4 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		NodoAST e5 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		NodoAST e6 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST e7 = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	if (e1 != null && e2 != null && e3 != null && e4 != null && e5 != null && e6 != null && e7 != null){
        	RESULT = new NodoAST(NodoAST.FUNLINEA, null, "Linea", e1.getLinea());
		RESULT.getHijos().add(e1);
		RESULT.getHijos().add(e2);
        	RESULT.getHijos().add(e3);
        	RESULT.getHijos().add(e4);
	        RESULT.getHijos().add(e5);
        	RESULT.getHijos().add(e6);
        	RESULT.getHijos().add(e7);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-15)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCION ::= ASIGNACION 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = n;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= DEC_VARIABLE 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = n;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= LLAMAR_FUNCION 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = n;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= DOWHILE 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = n;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= WHILE 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = n;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= FOR 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = n;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= IF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = n;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCIONES ::= INSTRUCCION 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = new NodoAST(NodoAST.INSTRUCCIONES, 0);
	if (ins != null){
		RESULT.setLinea(ins.getLinea());
		RESULT.getHijos().add(ins);
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",8, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              NodoAST RESULT =null;
		int linsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int linsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST lins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        if (lins == null) RESULT = new NodoAST(NodoAST.INSTRUCCIONES, 0); else RESULT = lins;
        if (ins != null){
		lins.setLinea(ins.getLinea());
                RESULT.getHijos().add(ins);
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",8, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_DATO ::= array opComparacion TIPO_DATO opComparacion 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	RESULT = "array:"+tipo;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",27, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_DATO ::= tipoDato 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex tipo = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = tipo.getLexema();

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",27, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_DATO ::= id 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = id1.getLexema();

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",27, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_DATO ::= ampersand id 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = "referencia:" + id1.getLexema();

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",27, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_DATO ::= ampersand tipoDato 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex tipo = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = "referencia:" + tipo.getLexema();

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",27, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_DATO ::= 
            {
              String RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",27, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_PARAM ::= error 
            {
              String RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_PARAM",28, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_PARAM ::= 
            {
              String RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_PARAM",28, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_PARAM ::= TIPO_DATO id 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = tipo + ":::" + id1.getLexema();

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_PARAM",28, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_PARAM ::= L_PARAM coma TIPO_DATO id 
            {
              String RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		String params = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        RESULT = (params == null) ? tipo + ":::" + id1.getLexema() : params + ";;;" + tipo + ":::" + id1.getLexema();

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_PARAM",28, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEC_ATRIB ::= TIPO_DATO L_IDS_DEC_VAR 
            {
              NodoAST RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST ids = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
        String idsSTR = "";
        for (NodoAST id: ids.getHijos()){
            if (idsSTR.equals("")) {
                idsSTR = id.getDatos1();
            } else {
                idsSTR += ";" + id.getDatos1();
            }
        }
        parser.clase.getValoresAtributos().addAll(ids.getHijos());
        declararVariables("private", tipo, idsSTR, 0, 0, true);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("DEC_ATRIB",6, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEC_ATRIB ::= ambito TIPO_DATO L_IDS_DEC_VAR 
            {
              NodoAST RESULT =null;
		int ambitoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).left;
		int ambitoright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).right;
		CompLex ambito = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST ids = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	String idsSTR = "";
        for (NodoAST id: ids.getHijos()){
            if (idsSTR.equals("")) {
                idsSTR = id.getDatos1();
            } else {
                idsSTR += ";" + id.getDatos1();
            }
        }
        parser.clase.getValoresAtributos().addAll(ids.getHijos());
	declararVariables(ambito.getLexema(), tipo, idsSTR, 0, 0, true);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("DEC_ATRIB",6, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCIONES_OP ::= 
            {
              NodoAST RESULT =null;
		 RESULT = new NodoAST(NodoAST.VACIO,0); 
              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_OP",25, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONES_OP ::= INSTRUCCIONES 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_OP",25, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEC_METODO ::= ambito id pareI L_PARAM pareD llaveI INSTRUCCIONES_OP llaveD 
            {
              NodoAST RESULT =null;
		int ambitotleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int ambitotright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		CompLex ambitot = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).right;
		String params = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	if (parser.clase != null) {
		if (id1.getLexema().equals(parser.clase.getNombre())){
			declararMetodo(ambitot.getLexema(), id1.getLexema(), "CONSTRUCTOR", params, id1.getLinea(), id1.getColumna(), ins);
		} else {
			agregarError("Semantico", "El nombre del constructor \"" + id1.getLexema() + "\" es invalido.", id1.getLinea(), id1.getColumna());
		}
	}

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("DEC_METODO",5, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEC_METODO ::= TIPO_DATO id pareI L_PARAM pareD llaveI INSTRUCCIONES_OP llaveD 
            {
              NodoAST RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).right;
		String params = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        declararMetodo("private", id1.getLexema(), tipo, params, id1.getLinea(), id1.getColumna(), ins);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("DEC_METODO",5, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEC_METODO ::= ambito TIPO_DATO id pareI L_PARAM pareD llaveI INSTRUCCIONES_OP llaveD 
            {
              NodoAST RESULT =null;
		int ambitoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-8)).left;
		int ambitoright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-8)).right;
		CompLex ambito = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).right;
		String params = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
        declararMetodo(ambito.getLexema(), id1.getLexema(), tipo, params, id1.getLinea(), id1.getColumna(), ins);

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("DEC_METODO",5, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-8)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_CLASE ::= error 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CLASE",4, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_CLASE ::= CONTENIDO_CLASE error 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CLASE",4, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_CLASE ::= DEC_ATRIB 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CLASE",4, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO_CLASE ::= DEC_METODO 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CLASE",4, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO_CLASE ::= CONTENIDO_CLASE DEC_ATRIB 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CLASE",4, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO_CLASE ::= CONTENIDO_CLASE DEC_METODO 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CLASE",4, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXTENDS_OP ::= error 
            {
              String RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXTENDS_OP",29, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXTENDS_OP ::= 
            {
              String RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXTENDS_OP",29, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXTENDS_OP ::= extendsS id 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;
		
	RESULT = id1.getLexema();

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("EXTENDS_OP",29, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC_CLASE ::= ambito clase id EXTENDS_OP NT$0 llaveI CONTENIDO_CLASE llaveD 
            {
              NodoAST RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoAST) ((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int ambitoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).left;
		int ambitoright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).right;
		CompLex ambito = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)).value;
		int extensionleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).left;
		int extensionright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).right;
		String extension = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-4)).value;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("DEC_CLASE",3, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-7)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              NodoAST RESULT =null;
		int ambitoleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int ambitoright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		CompLex ambito = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		int extensionleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).left;
		int extensionright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()).right;
		String extension = (String)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.peek()).value;

	String nombre = id1.getLexema();
	String clasePadre = (extension == null) ? "-" : extension;
	parser.clase = new Clase(nombre, clasePadre);
	if (CompiladorLenguaje.clasesCargadas.containsKey(nombre)){
		agregarError("Semantico", "La clase \"" + nombre + "\" ya a sido cargada.",id1.getLinea(), id1.getColumna());
	}
	CompiladorLenguaje.clasesCargadas.put(nombre, parser.clase);

	if (!clasePadre.equals("-")) {
              	if (!CompiladorLenguaje.clasesCargadas.containsKey(clasePadre)) {
                   	agregarError("Semantico", "La clase padre \"" + clasePadre + "\" no ha sido declarada.", id1.getLinea(), id1.getColumna());
              	} else {
			parser.clase.getTablasSimbolos().cargarHerencia(CompiladorLenguaje.clasesCargadas.get(clasePadre).getTablasSimbolos());
        	}
        }


              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= importar opComparacion id punto id opComparacion 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).right;
		CompLex id1 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		CompLex id2 = (CompLex)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		
	String path = parser.ruta + "/" + id1.getLexema() + "." + id2.getLexema();
	File arch = new File(path);
	if (!arch.exists()){
		agregarError("Semantico", "El archivo \"" + path + "\" no existe.",id1.getLinea(), id1.getColumna());
	} else {
           CompiladorLenguaje.compilar(arch, parser.ruta); 
        }

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-5)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_IMPORT ::= IMPORT 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_IMPORT",1, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_IMPORT ::= L_IMPORT IMPORT 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("L_IMPORT",1, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIAL ::= error 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIAL ::= DEC_CLASE 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= L_IMPORT DEC_CLASE 
            {
              NodoAST RESULT =null;

              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          return CUP$ParserLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).right;
		NodoAST start_val = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)).value;
		RESULT = start_val;
              CUP$ParserLenguaje$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.elementAt(CUP$ParserLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLenguaje$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserLenguaje$parser.done_parsing();
          return CUP$ParserLenguaje$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

